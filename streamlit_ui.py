# streamlit_ui.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from utils import generate_download_link, generate_excel_download
from calculations import (
    calculate_additional_metrics,
    calculate_roi,
    calculate_irr,
    calculate_total_bep,
    monte_carlo_simulation,
    calculate_financials,
    min_loan_amount_for_bep,
    calculate_monthly_bep,
    calculate_npv,
    calculate_multidimensional_sensitivity
)
from ml_models import predict_with_model


class MetricDisplay:
    def __init__(self, label):
        self.label = label

    def display(self, col, value):
        col.metric(self.label, f"{value:,.{st.session_state.get('selected_decimal','2')}f}" if st.session_state.get("selected_format") == "–° —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏" else f"{value:.{st.session_state.get('selected_decimal','2')}f}")


class ChartDisplay:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (—Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö, –ª–∏–Ω–µ–π–Ω—ã—Ö, —Ç–µ–ø–ª–æ–≤—ã—Ö –∏ —Ç. –¥.)
    –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∏ ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """

    def __init__(self, title, x_title="", y_title="–†—É–±–ª–∏", color_map=None):
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.color_map = color_map

    def display_bar(self, df, x, y, **kwargs):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã.
        –ï—Å–ª–∏ –≤ kwargs —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω color, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        –ò–Ω–∞—á–µ —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç–æ–ª–±—Ü–∞ x.
        """
        local_color = kwargs.pop("color") if "color" in kwargs else x

        fig = px.bar(
            df, x=x, y=y, title=self.title, text=y,
            color=local_color,
            color_discrete_map=self.color_map,
            **kwargs
        )
        fig.update_traces(textposition="outside", hovertemplate="%{y:.2f}")  # Add hover template
        fig.update_layout(yaxis_title=self.y_title, xaxis_title=self.x_title)
        st.plotly_chart(fig, use_container_width=True)

    def display_line(self, df, x, y, markers=True, color=None, y_range=None, **kwargs):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.
        """
        fig = px.line(
            df, x=x, y=y, title=self.title, markers=markers, color=color, **kwargs
        )
        if y_range:
            fig.update_layout(yaxis={"range": y_range})
        self._extracted_from_display_interactive_line_10(fig)


    def display_interactive_line(self, df, x, y, color=None, **kwargs):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.
        """
        fig = px.line(
            df, x=x, y=y, title=self.title, color=color, **kwargs
        )
        self._extracted_from_display_interactive_line_10(fig)
    

    def _extracted_from_display_interactive_line_10(self, fig):
        fig.update_layout(
            xaxis_title=self.x_title,
            yaxis_title=self.y_title,
            hovermode="x unified",
            xaxis=dict(rangeslider=dict(visible=True), type="-"),
        )
        fig.update_traces(hovertemplate="%{y:.2f}")
        st.plotly_chart(fig, use_container_width=True)

    def display_heatmap(self, df, x_title="", y_title="", **kwargs):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (heatmap).
        """
        fig = px.imshow(
            df,
            title=self.title,
            color_continuous_scale="viridis",
            **kwargs
        )
        fig.update_layout(xaxis_title=x_title, yaxis_title=y_title)
        st.plotly_chart(fig, use_container_width=True)


class TableDisplay:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
    """
    def display(self, df):
        st.dataframe(df, key = "df_table") # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, —É–±—Ä–∞–ª–∏ .style.format –∏ .apply


def display_tab1_header(tab, main_color="#007bff"):
    with tab:
        st.markdown(f"""
            <style>
                .main-header {{
                color: {main_color};
                }}
            </style>
            """, unsafe_allow_html=True)
        st.markdown('<h1 class="main-header">üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h1>', unsafe_allow_html=True)
        st.write("–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.")
        st.info(
            "–í —ç—Ç–æ–º –±–ª–æ–∫–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –ø—Ä–∏–±—ã–ª—å, ROI, IRR, NPV –∏ –ø—Ä–æ—á–∏–µ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )


def display_tab1_metrics(tab, base_financials, profit_margin, profitability, roi, irr, npv):
    with tab:
        col1, col2, col3 = st.columns(3)
        MetricDisplay("–û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±.)").display(col1, base_financials["total_income"])
        MetricDisplay("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)").display(col2, base_financials["total_expenses"])
        MetricDisplay("–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)").display(col3, base_financials["profit"])

        col4, col5 = st.columns(2)
        MetricDisplay("–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)").display(col4, profit_margin)
        MetricDisplay("–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)").display(col5, profitability)

        col6, col7, col8 = st.columns(3)
        MetricDisplay("ROI (%)").display(col6, roi if roi is not None else 0)
        col7.metric("IRR (%)", f"{irr:.2f}%")
        MetricDisplay("NPV (—Ä—É–±.)").display(col8, npv)


def display_tab1_bep(tab, params, base_financials):
    with tab:
        st.write("---")
        st.subheader("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–π–º–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è BEP")
        min_loan = min_loan_amount_for_bep(params, base_financials)
        if np.isinf(min_loan):
            st.write("–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç—Å—è.")
        else:
            st.write(f"{min_loan:,.2f} —Ä—É–±. ‚Äî –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.")


def display_tab1_chart(tab, base_financials):
    with tab:
        df_plot = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                base_financials["total_income"],
                base_financials["total_expenses"]
            ]
        })
        chart_display = ChartDisplay(
            "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã",
            color_map={"–î–æ—Ö–æ–¥": "green", "–†–∞—Å—Ö–æ–¥": "red"}
        )
        chart_display.display_bar(df_plot, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ")


def display_tab1_analysis(tab, base_financials, profit_margin, profitability, roi, irr):
    with tab:
        st.write("---")
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∏—Ç–æ–≥–æ–≤")
        profit = base_financials["profit"]

        if profit > 0:
            st.success("–ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–π.")
        elif profit < 0:
            st.error("–ü—Ä–æ–µ–∫—Ç —É–±—ã—Ç–æ—á–Ω—ã–π.")
        else:
            st.info("–ü—Ä–∏–±—ã–ª—å –Ω–∞ –Ω—É–ª–µ (—Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏).")

        if profit_margin > 10:
            st.success(f"–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ –≤—ã—Å–æ–∫–∞—è: {profit_margin:.2f}%.")
        elif profit_margin < 0:
            st.error(f"–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è: {profit_margin:.2f}%.")
        else:
            st.info(f"–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏: {profit_margin:.2f}%.")

        if profitability > 15:
            st.success(f"–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è: {profitability:.2f}%.")
        elif profitability < 0:
            st.error(f"–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è: {profitability:.2f}%.")
        else:
            st.info(f"–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {profitability:.2f}%.")

        if roi is None:
            st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å ROI, —Ç–∞–∫ –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—ã —Ä–∞–≤–Ω—ã 0.")
        elif roi > 10:
            st.success(f"ROI –≤—ã—Å–æ–∫–∏–π: {roi:.2f}%.")
        elif roi < 0:
            st.error(f"ROI –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π: {roi:.2f}%.")
        else:
            st.info(f"ROI: {roi:.2f}%.")

        if irr > 10:
            st.success(f"IRR –≤—ã—Å–æ–∫–∏–π: {irr:.2f}%.")
        elif irr < 0:
            st.error(f"IRR –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π: {irr:.2f}%.")
        else:
            st.info(f"IRR: {irr:.2f}%.")


def display_tab1(
    tab,
    base_financials,
    pm,
    pr,
    roi_val,
    irr_val,
    params,
    selected_param=None,
    main_color="#007bff",
    npv=0.0
):
    display_tab1_header(tab, main_color)
    display_tab1_metrics(tab, base_financials, pm, pr, roi_val, irr_val, npv)
    display_tab1_bep(tab, params, base_financials)
    display_tab1_chart(tab, base_financials)
    display_tab1_analysis(tab, base_financials, pm, pr, roi_val, irr_val)
    with tab:
        st.markdown("""
        **–¢–µ—Ä–º–∏–Ω—ã**:
        - **–ü—Ä–∏–±—ã–ª—å**: –¥–æ—Ö–æ–¥—ã –º–∏–Ω—É—Å —Ä–∞—Å—Ö–æ–¥—ã
        - **–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏**: (–ø—Ä–∏–±—ã–ª—å / –¥–æ—Ö–æ–¥—ã) * 100
        - **–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å**: (–ø—Ä–∏–±—ã–ª—å / —Ä–∞—Å—Ö–æ–¥—ã) * 100
        - **ROI**: ((–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã) / —Ä–∞—Å—Ö–æ–¥—ã) * 100
        - **IRR**: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ä–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—É—á—ë—Ç –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        - **NPV**: —á–∏—Å—Ç–∞—è –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        """, unsafe_allow_html=True)

        if selected_param:
            st.write("---")
            st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            compare_params(tab, params, selected_param)

        st.write("---")
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with open("help.md", "r", encoding='utf-8') as f:
            help_text = f.read()
            st.markdown(help_text, unsafe_allow_html=True)


def display_tab2_header(tab):
    with tab:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        st.info(
            "–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã."
        )


def display_tab2_basic_forecast(tab, base_financials, params):
    with tab:
        st.subheader("–ë–∞–∑–æ–≤—ã–π –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        df_projection = pd.DataFrame({
            "–ú–µ—Å—è—Ü": range(1, params.time_horizon + 1),
            "–î–æ—Ö–æ–¥—ã": np.linspace(
                base_financials["total_income"],
                base_financials["total_income"] * (1 + params.monthly_income_growth * params.time_horizon),
                params.time_horizon,
            ),
            "–†–∞—Å—Ö–æ–¥—ã": np.linspace(
                base_financials["total_expenses"],
                base_financials["total_expenses"] * (1 + params.monthly_expenses_growth * params.time_horizon),
                params.time_horizon,
            ),
        })
        df_projection["–ü—Ä–∏–±—ã–ª—å"] = df_projection["–î–æ—Ö–æ–¥—ã"] - df_projection["–†–∞—Å—Ö–æ–¥—ã"]
        df_projection["–ü—Ä–∏–±—ã–ª—å (%)"] = (df_projection["–ü—Ä–∏–±—ã–ª—å"] / df_projection["–†–∞—Å—Ö–æ–¥—ã"] * 100)
        df_long = df_projection.melt(
            id_vars="–ú–µ—Å—è—Ü",
            value_vars=["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ü—Ä–∏–±—ã–ª—å", "–ü—Ä–∏–±—ã–ª—å (%)"],
            var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å",
            value_name="–ó–Ω–∞—á–µ–Ω–∏–µ"
        )
        chart = ChartDisplay("–ü—Ä–æ–≥–Ω–æ–∑ (–±–∞–∑–æ–≤—ã–π)", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏")
        chart.display_line(df_long, "–ú–µ—Å—è—Ü", "–ó–Ω–∞—á–µ–Ω–∏–µ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")


def _extracted_from_display_tab2_ml_forecast_39(df_for_ml, ml_model, params, base_financials, features=None, auto_feature_selection=False):
    from ml_models import prepare_ml_data
    df_prepared = prepare_ml_data(df_for_ml, target_column="–î–æ—Ö–æ–¥—ã")
    predictions, intervals = predict_with_model(
        ml_model,
        df_prepared,
        list(range(1, params.time_horizon + 1)),
        features=features,
        auto_feature_selection=auto_feature_selection
    )
    df_ml = pd.DataFrame({"–ú–µ—Å—è—Ü": range(1, params.time_horizon + 1), "–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã": predictions})
    if intervals is not None:
        df_ml["–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞"] = intervals[:, 0]
        df_ml["–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞"] = intervals[:, 1]
        ChartDisplay("–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤ (ML)", y_title="–†—É–±–ª–∏", x_title="–ú–µ—Å—è—Ü").display_line(
            df_ml, "–ú–µ—Å—è—Ü", ["–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã", "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞", "–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞"], color="–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã"
        )
    else:
        ChartDisplay("–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤ (ML)", y_title="–†—É–±–ª–∏", x_title="–ú–µ—Å—è—Ü").display_line(
            df_ml, "–ú–µ—Å—è—Ü", "–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã", color="–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã"
        )
    st.dataframe(df_ml.style.format({"–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã": "{:,.2f} —Ä—É–±."}))

    start_income = base_financials["total_income"]
    start_expenses = base_financials["total_expenses"]
    future_months = list(range(1, params.time_horizon + 1))
    monthly_incomes = start_income * (1 + params.monthly_income_growth) ** (np.array(future_months) - 1)
    monthly_expenses = np.linspace(
        start_expenses,
        start_expenses * (1 + params.monthly_expenses_growth * params.time_horizon),
        params.time_horizon,
    )
    df_profit_ml = pd.DataFrame({
        "–ú–µ—Å—è—Ü": future_months,
        "–ü—Ä–æ–≥–Ω–æ–∑ –ü—Ä–∏–±—ã–ª—å": predictions - monthly_expenses[:len(predictions)]
    })
    ChartDisplay("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏ (ML)", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
        df_profit_ml, "–ú–µ—Å—è—Ü", "–ü—Ä–æ–≥–Ω–æ–∑ –ü—Ä–∏–±—ã–ª—å", color="–ü—Ä–æ–≥–Ω–æ–∑ –ü—Ä–∏–±—ã–ª—å"
    )

    from ml_models import calculate_metrics
    try:
        if params.auto_feature_selection and params.features is not None and len(params.features) > 1:
             from sklearn.feature_selection import SelectKBest, f_regression
             selector = SelectKBest(score_func=f_regression, k=min(3, len(params.features)))
             X = df_prepared[params.features].values
             selector.fit(X, df_prepared["–î–æ—Ö–æ–¥—ã"].values)
             selected_features = [features[i] for i in selector.get_support(indices=True)]
             y_pred = ml_model.predict(df_prepared[selected_features].values)
        else:
            X = df_prepared[params.features].values
            y_pred = ml_model.predict(X)
        y_true = df_prepared["–î–æ—Ö–æ–¥—ã"].values
        rmse, r2, mae = calculate_metrics(y_true, y_pred)
        st.write(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (ML-–º–æ–¥–µ–ª—å): RMSE={rmse:.2f}, R¬≤={r2:.2f}, MAE={mae:.2f}")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –º–µ—Ç—Ä–∏–∫: {e}")


def display_tab2_ml_forecast(
    tab,
    enable_ml_settings,
    selected_forecast_method,
    ml_model,
    df_for_ml,
    params,
    base_financials
):
    with tab:
        if enable_ml_settings:
            st.subheader("ML-–ø—Ä–æ–≥–Ω–æ–∑")
            st.write("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ—Ö–æ–¥–æ–≤.")

            import ml_models
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="train_model_btn"):
                if df_for_ml is not None:
                    try:
                         with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                            new_model = ml_models.train_ml_model(
                                df_for_ml,
                                target_column="–î–æ—Ö–æ–¥—ã",
                                model_type=params.forecast_method,
                                poly_degree=params.poly_degree,
                                n_estimators=params.n_estimators,
                                features=params.features,
                                param_search_method=params.param_search_method,
                                auto_feature_selection=params.auto_feature_selection
                            )
                            st.session_state["ml_model"] = new_model
                            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω –Ω–∏–∂–µ.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
                else:
                    st.warning("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (CSV/Excel).")

            if ml_model is not None and df_for_ml is not None:
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑..."):
                    _extracted_from_display_tab2_ml_forecast_39(
                        df_for_ml, ml_model, params, base_financials, features=params.features, auto_feature_selection = params.auto_feature_selection
                    )
            else:
                st.info("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.")
        else:
            st.warning("ML-–ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")


def _extracted_from_display_tab2_monte_carlo_55(num_simulations, arg1, months, arg3):
    data = {f"–°–∏–º—É–ª—è—Ü–∏—è {i + 1}": arg1[i] for i in range(num_simulations)}
    data["–ú–µ—Å—è—Ü"] = months
    data["–°—Ä–µ–¥–Ω–µ–µ"] = arg3.flatten()
    return pd.DataFrame(data)


def display_tab2_monte_carlo(tab, base_financials, params):
    with tab:
        st.subheader("–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ")
        st.write("–£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ –≤ –¥–æ—Ö–æ–¥–∞—Ö/—Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —Å—á—ë—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä—å–∏—Ä–æ–≤–∞–Ω–∏–π.")
        df_mc = monte_carlo_simulation(
            base_financials["total_income"],
            base_financials["total_expenses"],
            params.time_horizon,
            min(params.monte_carlo_simulations, 100),
            params.monte_carlo_deviation,
            params.monte_carlo_seed,
            params.monthly_income_growth,
            params.monthly_expenses_growth,
            params.monte_carlo_distribution,
            params.monte_carlo_normal_mean,
            params.monte_carlo_normal_std,
            params.monte_carlo_triang_left,
            params.monte_carlo_triang_mode,
            params.monte_carlo_triang_right
        )
        st.dataframe(df_mc.style.format("{:,.2f}"))

        months = df_mc["–ú–µ—Å—è—Ü"].values
        incomes = df_mc[["–°—Ä–µ–¥–Ω–∏–π –î–æ—Ö–æ–¥"]].values
        expenses = df_mc[["–°—Ä–µ–¥–Ω–∏–π –†–∞—Å—Ö–æ–¥"]].values
        profits = df_mc[["–°—Ä–µ–¥–Ω—è—è –ü—Ä–∏–±—ã–ª—å"]].values
        num_simulations = min(params.monte_carlo_simulations, 100)

        if params.monte_carlo_distribution == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            inc_factors = np.random.uniform(
                1 - params.monte_carlo_deviation, 1 + params.monte_carlo_deviation,
                (num_simulations, params.time_horizon)
            )
            exp_factors = np.random.uniform(
                1 - params.monte_carlo_deviation, 1 + params.monte_carlo_deviation,
                (num_simulations, params.time_horizon)
            )
        elif params.monte_carlo_distribution == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            inc_factors = np.random.normal(
                params.monte_carlo_normal_mean, params.monte_carlo_normal_std,
                (num_simulations, params.time_horizon)
            )
            exp_factors = np.random.normal(
                params.monte_carlo_normal_mean, params.monte_carlo_normal_std,
                (num_simulations, params.time_horizon)
            )
        elif params.monte_carlo_distribution == "–¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ":
            inc_factors = np.random.triangular(
                params.monte_carlo_triang_left, params.monte_carlo_triang_mode, params.monte_carlo_triang_right,
                (num_simulations, params.time_horizon)
            )
            exp_factors = np.random.triangular(
                params.monte_carlo_triang_left, params.monte_carlo_triang_mode, params.monte_carlo_triang_right,
                (num_simulations, params.time_horizon)
            )

        base_income = base_financials["total_income"]
        base_expenses = base_financials["total_expenses"]
        inc_growth = (1 + params.monthly_income_growth) ** (months - 1)
        exp_growth = (1 + params.monthly_expenses_growth) ** (months - 1)

        simulated_incomes = base_income * inc_growth * inc_factors
        simulated_expenses = base_expenses * exp_growth * exp_factors
        simulated_profits = simulated_incomes - simulated_expenses

        df_plot_income = _extracted_from_display_tab2_monte_carlo_55(
            num_simulations, simulated_incomes, months, incomes
        )
        df_plot_expenses = _extracted_from_display_tab2_monte_carlo_55(
            num_simulations, simulated_expenses, months, expenses
        )
        df_plot_profit = _extracted_from_display_tab2_monte_carlo_55(
            num_simulations, simulated_profits, months, profits
        )

        df_long = df_plot_income.melt(id_vars=["–ú–µ—Å—è—Ü"], var_name="–°–∏–º—É–ª—è—Ü–∏—è", value_name="–î–æ—Ö–æ–¥")
        ChartDisplay("–î–æ—Ö–æ–¥—ã (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
            df_long, "–ú–µ—Å—è—Ü", "–î–æ—Ö–æ–¥", color="–°–∏–º—É–ª—è—Ü–∏—è", markers=False
        )

        df_long_exp = df_plot_expenses.melt(id_vars=["–ú–µ—Å—è—Ü"], var_name="–°–∏–º—É–ª—è—Ü–∏—è", value_name="–†–∞—Å—Ö–æ–¥")
        ChartDisplay("–†–∞—Å—Ö–æ–¥—ã (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
            df_long_exp, "–ú–µ—Å—è—Ü", "–†–∞—Å—Ö–æ–¥", color="–°–∏–º—É–ª—è—Ü–∏—è", markers=False
        )

        df_long_profit = df_plot_profit.melt(id_vars=["–ú–µ—Å—è—Ü"], var_name="–°–∏–º—É–ª—è—Ü–∏—è", value_name="–ü—Ä–∏–±—ã–ª—å")
        ChartDisplay("–ü—Ä–∏–±—ã–ª—å (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
            df_long_profit, "–ú–µ—Å—è—Ü", "–ü—Ä–∏–±—ã–ª—å", color="–°–∏–º—É–ª—è—Ü–∏—è", markers=False
        )

        st.info(
            "–ö–∞–∂–¥–∞—è –ª–∏–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏. –ß–µ–º –±–æ–ª—å—à–µ —Å–∏–º—É–ª—è—Ü–∏–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∫–∞."
        )


def display_tab3_header(tab):
    with tab:
        st.header("–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (BEP)")
        st.info(
            "–ó–¥–µ—Å—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Å–∫–ª–∞–¥ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–æ–ª—å –ø–æ –ø—Ä–∏–±—ã–ª–∏, –∞ —Ç–∞–∫–∂–µ –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
        )


def display_tab3_bep_info(tab, base_financials, params):
    with tab:
        bep_income = calculate_total_bep(base_financials, params)
        current_income = base_financials["total_income"]
        min_loan = min_loan_amount_for_bep(params, base_financials)
        if bep_income == float("inf"):
            st.write("–î–æ—Ö–æ–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç—Å—è.")
        else:
            st.write(f"–î–æ—Ö–æ–¥ –¥–ª—è BEP: {bep_income:,.2f} —Ä—É–±.")
            if current_income >= bep_income:
                st.success("–£–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤.")
            else:
                deficit = bep_income - current_income
                st.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {deficit:,.2f} —Ä—É–±. –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è BEP.")

        if min_loan > 0:
            st.write(f"–ú–∏–Ω. –∑–∞–ª–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è BEP: {min_loan:,.2f} —Ä—É–±. –Ω–∞ –æ–¥–Ω—É –≤–µ—â—å.")

        if current_income > 0 and bep_income != float("inf"):
            progress_value = min(1.0, current_income / bep_income)
            st.progress(progress_value, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ BEP: {progress_value * 100:.2f}%")


def display_tab3_monthly_bep(tab, base_financials, params):
    with tab:
        st.write("---")
        st.subheader("–ü–æ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ BEP")
        st.write("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –¥–æ—Ö–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.")
        monthly_bep_df = calculate_monthly_bep(base_financials, params)
        st.dataframe(monthly_bep_df.style.format({"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP": "{:,.2f}"}))
        ChartDisplay("–ü–æ–º–µ—Å—è—á–Ω–∞—è BEP", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
            monthly_bep_df, "–ú–µ—Å—è—Ü", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP",
            color="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP", markers=True
        )
        st.info("–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –ø–æ—Ä–æ–≥–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º.")


def display_tab3_sensitivity(tab, params, disable_extended=False, help_texts=None):
    with tab:
        st.write("---")
        st.subheader("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        st.write("–ö–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ —Å—Ç–∞–≤–æ–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–±—ã–ª—å –∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.")

        def build_bep_df(p, param_key, base_val, min_val, max_val):
            from calculations import calculate_financials, calculate_total_bep
            vals = np.linspace(min_val, max_val, 50)
            profits = []
            beps = []
            orig_val = getattr(p, param_key)
            for v in vals:
                setattr(p, param_key, v)
                fin = calculate_financials(p, disable_extended)
                beps.append(calculate_total_bep(fin, p))
                profits.append(fin["profit"])
            setattr(p, param_key, orig_val)
            return pd.DataFrame({
                param_key: vals,
                "–ü—Ä–∏–±—ã–ª—å": profits,
                "BEP": beps
            })
         # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ param_display_map, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∏ –∑–Ω–∞—á–∏–º—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        param_display_map = {
            key: help_texts.get(key, key)
            for key in params.__dict__.keys()
            if isinstance(getattr(params, key), (int, float))
            and key not in [
                "total_area",
                "useful_area_ratio",
                "storage_share",
                "loan_share",
                "vip_share",
                "short_term_share",
                "shelves_per_m2",
                "time_horizon",
                "liquidity_factor",
                "safety_factor",
                "loan_grace_period",
                "monte_carlo_simulations",
                "monte_carlo_deviation",
                "monte_carlo_seed",
                "enable_ml_settings",
                "poly_degree",
                "n_estimators",
                "monthly_inflation_rate",
                "monthly_rent_growth",
                "monthly_salary_growth",
                "monthly_other_expenses_growth",
                "electricity_cost_per_m2",
                "packaging_cost_per_m2",
                "storage_items_density",
                "loan_items_density",
                "vip_items_density",
                "short_term_items_density",
                "monte_carlo_distribution",
                "monte_carlo_normal_mean",
                "monte_carlo_normal_std",
                "monte_carlo_triang_left",
                "monte_carlo_triang_mode",
                "monte_carlo_triang_right",
                "auto_feature_selection",
                "enable_ml_settings"
            ]
        }
        reverse_map = dict(zip(param_display_map.values(), param_display_map.keys()))
        ru_options = list(param_display_map.values())
        all_params = [key for key in params.__dict__.keys() if key in param_display_map]

        selected_ru_params = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            ru_options,
            max_selections=3
        )
        selected_keys = [reverse_map[ru] for ru in selected_ru_params]

        for key in selected_keys:
            base_val = getattr(params, key)
            ru_label = param_display_map[key]

            col1, col2 = st.columns(2)
            with col1:
                min_val = st.number_input(
                    f"–ú–∏–Ω–∏–º—É–º –¥–ª—è {ru_label}",
                    value=base_val * 0.5 if base_val > 0 else 0.0,
                    format="%.2f",
                    key=f"min_{key}",
                     help=help_texts.get(key, ""),
                )
            with col2:
                max_val = st.number_input(
                    f"–ú–∞–∫—Å–∏–º—É–º –¥–ª—è {ru_label}",
                    value=base_val * 1.5 if base_val > 0 else 1.0,
                    format="%.2f",
                    key=f"max_{key}",
                    help=help_texts.get(key, "")
                )

            df_sens = build_bep_df(params, key, base_val, min_val, max_val)

            chart = ChartDisplay(f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {ru_label}", x_title=ru_label, y_title="–†—É–±–ª–∏")
            chart.display_interactive_line(
                df_sens,
                x=key,
                y=["–ü—Ä–∏–±—ã–ª—å", "BEP"],
                markers=True
            )
            st.info(
                f"–ó–¥–µ—Å—å –≤–∏–¥–Ω–æ, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {ru_label} –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å –∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏."
            )
        st.write("---")
        st.subheader("–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        st.info("–ò–∑–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")

        selected_ru_params_multidim = st.multiselect(
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            ru_options,
            max_selections=2,
            key="multidim_sens_select"
        )
        selected_keys_multidim = [reverse_map[ru] for ru in selected_ru_params_multidim]

        def parse_and_translate_params(row_str, pdmap):
            if not row_str:
                return row_str
            parts = row_str.split(", ")
            translated_parts = []
            for part in parts:
                if "=" in part:
                    k, v = part.split("=")
                    k = k.strip()
                    v = v.strip()
                    ru_k = pdmap.get(k, k)
                    translated_parts.append(f"{ru_k}={float(v):.2f}")
                else:
                    translated_parts.append(part)
            return ", ".join(translated_parts)

        if selected_keys_multidim:
            param_ranges = {}
            for key in selected_keys_multidim:
                base_val = getattr(params, key)
                ru_label = param_display_map[key]
                col1, col2 = st.columns(2)
                with col1:
                    min_val = st.number_input(
                        f"–ú–∏–Ω. –¥–ª—è {ru_label}",
                        value=base_val * 0.8 if base_val > 0 else 0.0,
                        format="%.2f",
                        key=f"multidim_min_{key}",
                        help=help_texts.get(key, ""),
                    )
                with col2:
                    max_val = st.number_input(
                        f"–ú–∞–∫—Å. –¥–ª—è {ru_label}",
                        value=base_val * 1.2 if base_val > 0 else 1.0,
                        format="%.2f",
                        key=f"multidim_max_{key}",
                        help=help_texts.get(key, ""),
                    )
                param_ranges[key] = np.linspace(min_val, max_val, 3)

            scenario_options = ["–ë–∞–∑–æ–≤—ã–π", "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π"]
            selected_scenario = st.selectbox(
                "–°—Ü–µ–Ω–∞—Ä–∏–π",
                scenario_options,
                key="scenario_select"
            )

            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", key="multidim_analyze_btn"):
                from calculations import calculate_multidimensional_sensitivity
                original_values = {}
                temp_params = params

                if selected_scenario != "–ë–∞–∑–æ–≤—ã–π":
                    for param_key in selected_keys_multidim:
                        original_values[param_key] = getattr(temp_params, param_key)
                        if selected_scenario == "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π":
                            if original_values[param_key] > 0:
                                setattr(temp_params, param_key, original_values[param_key] * 1.2)
                        elif selected_scenario == "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π":
                            if original_values[param_key] > 0:
                                setattr(temp_params, param_key, original_values[param_key] * 0.8)

                df_multi = calculate_multidimensional_sensitivity(
                    temp_params,
                    selected_keys_multidim,
                    param_ranges,
                    disable_extended
                )

                if selected_scenario != "–ë–∞–∑–æ–≤—ã–π":
                    for param_key, old_val in original_values.items():
                        setattr(temp_params, param_key, old_val)

                reverse_eng_ru_map = dict(param_display_map)
                df_multi["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"] = df_multi["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"].apply(
                    lambda x: parse_and_translate_params(x, reverse_eng_ru_map)
                )

                TableDisplay().display(df_multi.copy())

                if len(selected_keys_multidim) == 2:
                    key1 = selected_keys_multidim[0]
                    key2 = selected_keys_multidim[1]
                    df_multi_pivot = df_multi.pivot(
                        index=key1,
                        columns=key2,
                        values="–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"
                    )
                    if not df_multi_pivot.empty:
                        df_multi_pivot_copy = df_multi_pivot.copy()
                        df_multi_pivot_copy.index = [
                            f"{param_display_map[key1]} = {val:.2f}"
                            for val in df_multi_pivot.index
                        ]
                        df_multi_pivot_copy.columns = [
                            f"{param_display_map[key2]} = {val:.2f}"
                            for val in df_multi_pivot.columns
                        ]
                        ChartDisplay(
                            f"–ü—Ä–∏–±—ã–ª—å: {param_display_map[key1]} vs {param_display_map[key2]}",
                            x_title=param_display_map[key2],
                            y_title=param_display_map[key1]
                        ).display_heatmap(df_multi_pivot_copy)
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                else:
                    ChartDisplay("–ü—Ä–∏–±—ã–ª—å (–º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑)", x_title="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", y_title="–†—É–±–ª–∏").display_bar(
                        df_multi, x="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", y="–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"
                    )

            st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –≤—ã—à–µ.")

def display_tab4_header(tab):
    with tab:
        st.header("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
        st.write("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Ö–æ–¥–æ–≤, —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–ª–æ—â–∞–¥–µ–π –∏ –ø—Ä.")


def display_tab4_area_metrics(tab, params):
    with tab:
        col1, col2, col3, col4 = st.columns(4)
        MetricDisplay("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (–º¬≤)").display(col1, params.storage_area)
        MetricDisplay("VIP (–º¬≤)").display(col2, params.vip_area)
        MetricDisplay("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–º¬≤)").display(col3, params.short_term_area)
        MetricDisplay("–ó–∞–π–º—ã (–º¬≤)").display(col4, params.loan_area)


def display_tab4_storage_table(tab, params, base_financials):
    with tab:
        st.write("---")
        df_storage = pd.DataFrame({
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "VIP", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", "–ó–∞–π–º—ã"],
            "–ü–ª–æ—â–∞–¥—å (–º¬≤)": [
                params.storage_area,
                params.vip_area,
                params.short_term_area,
                params.loan_area
            ],
            "–î–æ—Ö–æ–¥ (—Ä—É–±.)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                base_financials["loan_income_after_realization"],
            ],
        })
        TableDisplay().display(
            df_storage.copy()
            .style
            .format({
                "–ü–ª–æ—â–∞–¥—å (–º¬≤)": "{:,.2f}",
                "–î–æ—Ö–æ–¥ (—Ä—É–±.)": "{:,.2f}"
            })
        )


def display_tab4_profit_table(tab, params, base_financials):
    with tab:
        st.write("---")
        df_profit = pd.DataFrame({
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "VIP", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", "–ó–∞–π–º—ã", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è"],
            "–î–æ—Ö–æ–¥ (—Ä—É–±.)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                base_financials["loan_income"],
                base_financials["realization_income"],
            ],
            "–î–æ—Ö–æ–¥ (—Ö—Ä–∞–Ω–µ–Ω–∏–µ)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                0,
                0,
            ],
            "–î–æ—Ö–æ–¥ (–∑–∞–π–º—ã)": [
                0,
                0,
                0,
                base_financials["loan_income_after_realization"],
                0
            ],
            "–î–æ—Ö–æ–¥ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)": [
                0,
                0,
                0,
                0,
                base_financials["realization_income"]
            ],
            "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)": [
                params.storage_area * params.rental_cost_per_m2,
                params.vip_area * params.rental_cost_per_m2,
                params.short_term_area * params.rental_cost_per_m2,
                params.loan_area * params.rental_cost_per_m2,
                0,
            ],
            "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": [
                base_financials["storage_income"] - (params.storage_area * params.rental_cost_per_m2),
                base_financials["vip_income"] - (params.vip_area * params.rental_cost_per_m2),
                base_financials["short_term_income"] - (params.short_term_area * params.rental_cost_per_m2),
                base_financials["loan_income_after_realization"] - (params.loan_area * params.rental_cost_per_m2),
                base_financials["realization_income"],
            ],
        })

        def highlight_negative(s):
            return ["background-color: #ffcccc" if v < 0 else "" for v in s]

        TableDisplay().display(
            df_profit.style
            .apply(highlight_negative, subset=["–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"])
            .format({
                col: "{:,.2f}" for col in [
                    "–î–æ—Ö–æ–¥ (—Ä—É–±.)",
                    "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)",
                    "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)",
                    "–î–æ—Ö–æ–¥ (—Ö—Ä–∞–Ω–µ–Ω–∏–µ)",
                    "–î–æ—Ö–æ–¥ (–∑–∞–π–º—ã)",
                    "–î–æ—Ö–æ–¥ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)",
                ]
            })
        )


def display_tab4_results(tab, base_financials, params, irr_val):
    from calculations import calculate_additional_metrics, calculate_roi, calculate_total_bep, calculate_npv

    with tab:
        st.write("---")
        pm, pr = calculate_additional_metrics(
            base_financials["total_income"],
            base_financials["total_expenses"],
            base_financials["profit"]
        )
        roi_val = calculate_roi(base_financials["total_income"], base_financials["total_expenses"])
        bep_income = calculate_total_bep(base_financials, params)

        cash_flows = [-params.one_time_expenses] + [base_financials["profit"]] * params.time_horizon
        npv_val = calculate_npv(cash_flows, 0.05)

        df_results = pd.DataFrame({
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–û–±—â–∏–π –¥–æ—Ö–æ–¥", "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "–ü—Ä–∏–±—ã–ª—å",
                "–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)", "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)", "ROI (%)",
                "IRR (%)", "–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (—Ä—É–±.)",
                "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP",
                "–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±.)", "NPV (—Ä—É–±.)"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                base_financials["total_income"],
                base_financials["total_expenses"],
                base_financials["profit"],
                pm,
                pr,
                roi_val,
                irr_val,
                min_loan_amount_for_bep(params, base_financials),
                params.one_time_expenses,
                bep_income,
                base_financials["total_income"],
                npv_val
            ],
        })
        TableDisplay().display(df_results)

        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                data=generate_download_link(df_results, return_raw=True),
                file_name="results.csv",
                mime="text/csv",
            )
        with col2:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
                data=generate_excel_download(df_results, return_raw=True),
                file_name="results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        st.info(
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )


def compare_params(tab, current_params, selected_param):
    if ("saved_params" not in st.session_state
        or selected_param not in st.session_state.saved_params):
        st.error("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return

    saved_params = st.session_state.saved_params[selected_param]

    attributes_to_compare = [
        "total_area", "rental_cost_per_m2", "useful_area_ratio",
        "storage_area_manual", "loan_area_manual", "vip_area_manual",
        "short_term_area_manual", "storage_fee", "shelves_per_m2",
        "short_term_daily_rate", "vip_extra_fee", "item_evaluation",
        "item_realization_markup", "average_item_value", "loan_interest_rate",
        "loan_term_days", "realization_share_storage", "realization_share_loan",
        "realization_share_vip", "realization_share_short_term",
        "storage_fill_rate", "loan_fill_rate", "vip_fill_rate", "short_term_fill_rate",
        "storage_items_density", "loan_items_density", "vip_items_density",
        "short_term_items_density", "storage_monthly_churn", "loan_monthly_churn",
        "vip_monthly_churn", "short_term_monthly_churn", "salary_expense",
        "miscellaneous_expenses", "depreciation_expense", "marketing_expenses",
        "insurance_expenses", "taxes", "utilities_expenses", "maintenance_expenses",
        "one_time_setup_cost", "one_time_equipment_cost", "one_time_other_costs",
        "one_time_legal_cost", "one_time_logistics_cost",
        "electricity_cost_per_m2", "packaging_cost_per_m2",
        "monthly_inflation_rate", "monthly_rent_growth",
        "monthly_salary_growth", "monthly_other_expenses_growth",
        "default_probability", "liquidity_factor", "safety_factor",
        "loan_grace_period", "monthly_income_growth", "monthly_expenses_growth",
    ]

    param_display_map = {
        "total_area": "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
        "rental_cost_per_m2": "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (—Ä—É–±./–º¬≤/–º–µ—Å.)",
        "useful_area_ratio": "–î–æ–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ (%)",
        "storage_area_manual": "–ü—Ä–æ—Å—Ç–æ–µ (–º¬≤)",
        "loan_area_manual": "–ó–∞–π–º—ã (–º¬≤)",
        "vip_area_manual": "VIP (–º¬≤)",
        "short_term_area_manual": "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–º¬≤)",
        "storage_fee": "–¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ (—Ä—É–±./–º¬≤/–º–µ—Å.)",
        "shelves_per_m2": "–ü–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤",
        "short_term_daily_rate": "–¢–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)",
        "vip_extra_fee": "–ù–∞—Ü–µ–Ω–∫–∞ VIP (—Ä—É–±./–º¬≤/–º–µ—Å.)",
        "item_evaluation": "–û—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (%)",
        "item_realization_markup": "–ù–∞—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (%)",
        "average_item_value": "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (—Ä—É–±.)",
        "loan_interest_rate": "–°—Ç–∞–≤–∫–∞ –∑–∞–π–º–æ–≤ (%/–¥–µ–Ω—å)",
        "loan_term_days": "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ (–¥–Ω–µ–π)",
        "realization_share_storage": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–µ (%)",
        "realization_share_loan": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–π–º—ã (%)",
        "realization_share_vip": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è VIP (%)",
        "realization_share_short_term": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (%)",
        "storage_fill_rate": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ (%)",
        "loan_fill_rate": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–π–º—ã (%)",
        "vip_fill_rate": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ VIP (%)",
        "short_term_fill_rate": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (%)",
        "storage_items_density": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–µ (–≤–µ—â–µ–π/–º¬≤)",
        "loan_items_density": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∑–∞–π–º—ã (–≤–µ—â–µ–π/–º¬≤)",
        "vip_items_density": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å VIP (–≤–µ—â–µ–π/–º¬≤)",
        "short_term_items_density": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–≤–µ—â–µ–π/–º¬≤)",
        "storage_monthly_churn": "–û—Ç—Ç–æ–∫ –ø—Ä–æ—Å—Ç–æ–µ (%)",
        "loan_monthly_churn": "–û—Ç—Ç–æ–∫ –∑–∞–π–º—ã (%)",
        "vip_monthly_churn": "–û—Ç—Ç–æ–∫ VIP (%)",
        "short_term_monthly_churn": "–û—Ç—Ç–æ–∫ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (%)",
        "salary_expense": "–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±./–º–µ—Å.)",
        "miscellaneous_expenses": "–ü—Ä–æ—á–∏–µ (—Ä—É–±./–º–µ—Å.)",
        "depreciation_expense": "–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (—Ä—É–±./–º–µ—Å.)",
        "marketing_expenses": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (—Ä—É–±./–º–µ—Å.)",
        "insurance_expenses": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
        "taxes": "–ù–∞–ª–æ–≥–∏ (—Ä—É–±./–º–µ—Å.)",
        "utilities_expenses": "–ö–æ–º–º—É–Ω–∞–ª–∫–∞ (—Ä—É–±./–º–µ—Å.)",
        "maintenance_expenses": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
        "one_time_setup_cost": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä—É–±.)",
        "one_time_equipment_cost": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä—É–±.)",
        "one_time_other_costs": "–î—Ä—É–≥–∏–µ (—Ä—É–±.)",
        "one_time_legal_cost": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ (—Ä—É–±.)",
        "one_time_logistics_cost": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ (—Ä—É–±.)",
        "electricity_cost_per_m2": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (—Ä—É–±./–º¬≤)",
        "packaging_cost_per_m2": "–£–ø–∞–∫–æ–≤–∫–∞ (—Ä—É–±./–º¬≤)",
        "monthly_inflation_rate": "–ò–Ω—Ñ–ª—è—Ü–∏—è (%/–º–µ—Å.)",
        "monthly_rent_growth": "–†–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã (%/–º–µ—Å.)",
        "monthly_salary_growth": "–†–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã (%/–º–µ—Å.)",
        "monthly_other_expenses_growth": "–†–æ—Å—Ç –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
        "time_horizon": "–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å.)",
        "default_probability": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (%)",
        "liquidity_factor": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏",
        "safety_factor": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞",
        "loan_grace_period": "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å.)",
        "monthly_income_growth": "–†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
        "monthly_expenses_growth": "–†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
         "forecast_method": "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
        "monte_carlo_simulations": "–°–∏–º—É–ª—è—Ü–∏–π –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ",
        "monte_carlo_deviation": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (0.1 = ¬±10%)",
        "monte_carlo_seed": "Seed",
        "enable_ml_settings": "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ML-–ø—Ä–æ–≥–Ω–æ–∑",
        "poly_degree": "–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞",
        "n_estimators": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤",
        "features": "–ü—Ä–∏–∑–Ω–∞–∫–∏",
        "monte_carlo_distribution": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "monte_carlo_normal_mean": "–°—Ä–µ–¥–Ω–µ–µ (–Ω–æ—Ä–º. —Ä–∞—Å–ø—Ä.)",
        "monte_carlo_normal_std": "–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–Ω–æ—Ä–º. —Ä–∞—Å–ø—Ä.)",
        "monte_carlo_triang_left": "–ú–∏–Ω. –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)",
        "monte_carlo_triang_mode": "–ú–æ–¥–∞ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)",
        "monte_carlo_triang_right": "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)"
    }

    with tab:
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        for attr in attributes_to_compare:
            current_value = getattr(current_params, attr, None)
            saved_value = saved_params.get(attr)
            if current_value != saved_value:
                ru_label = param_display_map.get(attr, attr)
                if isinstance(current_value, (int, float)) and isinstance(saved_value, (int, float)):
                    import pandas as pd
                    df_compare = pd.DataFrame({
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": [float(saved_value), float(current_value)],
                        "–°–æ—Å—Ç–æ—è–Ω–∏–µ": ["–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ", "–¢–µ–∫—É—â–µ–µ"]
                    })
                    ChartDisplay(f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {ru_label}", x_title="–°–æ—Å—Ç–æ—è–Ω–∏–µ", y_title="–†—É–±–ª–∏").display_bar(
                        df_compare, "–°–æ—Å—Ç–æ—è–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"
                    )
                    st.write(f"**–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ:** {saved_value:,.2f} | **–¢–µ–∫—É—â–µ–µ:** {current_value:,.2f}")
                else:
                    st.write(f"**{ru_label}:** –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ: {saved_value} | –¢–µ–∫—É—â–µ–µ: {current_value}")


def display_tab5_header(tab):
    with tab:
         st.header("–î–∞—à–±–æ—Ä–¥")
         st.info(
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ."
        )

def display_tab5_dashboard(tab, base_financials, params, help_texts):
    with tab:
        col1, col2, col3 = st.columns(3)
        MetricDisplay("–û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±.)").display(col1, base_financials["total_income"])
        MetricDisplay("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)").display(col2, base_financials["total_expenses"])
        MetricDisplay("–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)").display(col3, base_financials["profit"])
        
        col4, col5 = st.columns(2)
        pm, pr = calculate_additional_metrics(
            base_financials["total_income"],
            base_financials["total_expenses"],
            base_financials["profit"]
        )
        roi = calculate_roi(base_financials["total_income"], base_financials["total_expenses"])
        MetricDisplay("–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)").display(col4, pm)
        MetricDisplay("–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)").display(col5, pr)
        
        col6, col7 = st.columns(2)
        if roi is not None:
            MetricDisplay("ROI (%)").display(col6, roi)
        else:
            col6.metric("ROI (%)", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")

        irr_val = calculate_irr(
            [
                -params.one_time_setup_cost - params.one_time_equipment_cost
                - params.one_time_other_costs - params.one_time_legal_cost
                - params.one_time_logistics_cost
            ]
            + [base_financials["profit"]] * params.time_horizon
        )
        col7.metric("IRR (%)", f"{irr_val:.2f}%")

        st.write("---")
        st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏")

        df_plot = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                base_financials["total_income"],
                base_financials["total_expenses"]
            ]
        })
        chart_display = ChartDisplay(
            "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã",
            color_map={"–î–æ—Ö–æ–¥": "green", "–†–∞—Å—Ö–æ–¥": "red"}
        )
        chart_display.display_bar(df_plot, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ")
        
        
        df_storage = pd.DataFrame({
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "VIP", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", "–ó–∞–π–º—ã"],
            "–ü–ª–æ—â–∞–¥—å (–º¬≤)": [
                params.storage_area,
                params.vip_area,
                params.short_term_area,
                params.loan_area
            ],
            "–î–æ—Ö–æ–¥ (—Ä—É–±.)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                base_financials["loan_income_after_realization"],
            ],
        })
        ChartDisplay("–î–æ—Ö–æ–¥—ã –ø–æ —Ç–∏–ø–∞–º —Ö—Ä–∞–Ω–µ–Ω–∏—è", x_title = "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è", y_title="–†—É–±–ª–∏").display_bar(
                df_storage, x="–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è", y="–î–æ—Ö–æ–¥ (—Ä—É–±.)"
        )
        
        monthly_bep_df = calculate_monthly_bep(base_financials, params)
        ChartDisplay("–ü–æ–º–µ—Å—è—á–Ω–∞—è BEP", x_title="–ú–µ—Å—è—Ü", y_title="–†—É–±–ª–∏").display_line(
            monthly_bep_df, "–ú–µ—Å—è—Ü", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP",
            color="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP", markers=True
        )