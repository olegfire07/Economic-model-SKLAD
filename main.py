# main.py

import streamlit as st
import numpy as np
import pandas as pd
import os
import joblib
import yaml
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–∞–∫–µ—Ç).
st.set_page_config(page_title="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ (–ü—Ä–æ–µ–∫—Ç-–∫–æ–Ω–≤–µ–π–µ—Ä ‚Ññ2)", layout="wide")

from data_model import WarehouseParams, validate_inputs
from calculations import (
    calculate_additional_metrics,
    calculate_roi,
    calculate_irr,
    calculate_total_bep,
    monte_carlo_simulation,
    calculate_financials,
    min_loan_amount_for_bep,
    calculate_monthly_bep,
    calculate_areas,
    calculate_npv
)
from utils import (
    normalize_shares,
    load_params_from_file,
    save_params_to_file,
    load_css,
)
from streamlit_ui import (
    MetricDisplay,
    ChartDisplay,
    TableDisplay,
    display_tab1_header,
    display_tab1_metrics,
    display_tab1_bep,
    display_tab1_chart,
    display_tab1_analysis,
    display_tab1,
    display_tab2_header,
    display_tab2_basic_forecast,
    display_tab2_ml_forecast,
    display_tab2_monte_carlo,
    display_tab3_header,
    display_tab3_bep_info,
    display_tab3_monthly_bep,
    display_tab3_sensitivity,
    display_tab4_header,
    display_tab4_area_metrics,
    display_tab4_storage_table,
    display_tab4_profit_table,
    display_tab4_results,
    compare_params,
    display_tab5_header,
    display_tab5_dashboard
)
from ml_models import prepare_ml_data, load_ml_model, train_ml_model
from app_state import AppState


def save_trained_model_to_file(model, filename="trained_model.pkl"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é ML-–º–æ–¥–µ–ª—å –≤ –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–∫–∞—á–∞—Ç—å –µ—ë –≤ –≤–∏–¥–µ .pkl.
    """
    import io
    import joblib
    buffer = io.BytesIO()
    joblib.dump(model, buffer)
    buffer.seek(0)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å ML-–º–æ–¥–µ–ª—å",
        data=buffer,
        file_name=filename,
        mime="application/octet-stream"
    )


@st.cache_data
def load_help_texts():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ help_text.yaml (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ).
    """
    try:
        with open("help_text.yaml", "r") as f:
            return yaml.safe_load(f)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å help_text.yaml: {e}")
        return {}

help_texts = load_help_texts()
load_css("style.css")

st.markdown("# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ (–ü—Ä–æ–µ–∫—Ç-–∫–æ–Ω–≤–µ–π–µ—Ä ‚Ññ2)")
st.markdown(
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–∫–ª–∞–¥–∞. "
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—é—Ç—Å—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö."
)

app_state = AppState()

with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)

default_params = config["default_params"]

selected_forecast_method = app_state.get("forecast_method") or "–ë–∞–∑–æ–≤—ã–π"
poly_degree = app_state.get("poly_degree") or 2
n_estimators = app_state.get("n_estimators") or 100
df_for_ml = app_state.get("df_for_ml")
ml_model = app_state.get("ml_model")
features = app_state.get("features") or ["–ú–µ—Å—è—Ü", "Lag_1", "Lag_2", "Rolling_Mean_3", "Rolling_Mean_5"]
auto_feature_selection = app_state.get("auto_feature_selection") or False

def reset_params():
    """
    –°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
    """
    app_state.load_default_state()
    st.session_state["uploaded_file"] = None
    st.session_state["df_for_ml"] = None
    st.session_state["ml_model"] = None
    st.session_state["forecast_method"] = "–ë–∞–∑–æ–≤—ã–π"
    st.rerun()

query_params = st.query_params
if query_params and "params" in query_params:
    try:
        loaded_params_str = query_params["params"]
        loaded_params = json.loads(loaded_params_str)
        for key, value in loaded_params.items():
            if key in default_params:
                app_state.set(key, value)
        if "shares" in loaded_params:
            app_state.shares.update(loaded_params["shares"])
        st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ URL.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ URL: {e}")

with st.sidebar:
    st.markdown("## –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        reset_params()
    
    with st.sidebar.expander("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", expanded=False):
        # –î–æ–±–∞–≤–ª–µ–Ω —Å–µ–ª–µ–∫—Ç–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∏—Å–µ–ª
        format_options = ["–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π", "–° —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"]
        current_format = app_state.get("selected_format") or "–° —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"
        format_index = format_options.index(current_format) if current_format in format_options else 1
        selected_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª",
            format_options,
            index=format_index,
            help = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∏—Å–µ–ª: —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á –∏–ª–∏ –±–µ–∑.",
        )
        app_state.set("selected_format", selected_format)
         
        decimal_places_options = ["0", "1", "2", "3", "4"]
        current_decimal = app_state.get("selected_decimal") or "2"
        decimal_index = decimal_places_options.index(current_decimal) if current_decimal in decimal_places_options else 2
        selected_decimal = st.selectbox(
            "–ó–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π",
            decimal_places_options,
            index=decimal_index,
            help = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.",
        )
        app_state.set("selected_decimal", selected_decimal)
        
        theme_options = ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "–¢–µ–º–Ω–∞—è"]
        current_theme = app_state.get("selected_theme") or "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
        theme_index = theme_options.index(current_theme) if current_theme in theme_options else 0
        selected_theme = st.selectbox(
            "–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            theme_options,
            index=theme_index,
            help=help_texts.get("theme", "")
        )
        app_state.set("selected_theme", selected_theme)

        main_color = st.color_picker(
            "–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            value=app_state.get("main_color") or "#007bff",
            help=help_texts.get("main_color", "")
        )
        app_state.set("main_color", main_color)

        if selected_theme == "–¢–µ–º–Ω–∞—è":
            load_css("dark_style.css")
        else:
            load_css("style.css")
    
    
    with st.sidebar.expander("### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=False):
        total_area = st.number_input(
            "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
            value=app_state.get("total_area"),
            step=10,
            min_value=1,
            format="%i",
            help=help_texts.get("total_area", "–û–±—â–∞—è –∞—Ä–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö."),
        )
        app_state.set("total_area", total_area)
        if total_area <= 0:
            st.error("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")

        rental_cost_per_m2 = st.number_input(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (—Ä—É–±./–º¬≤/–º–µ—Å.)",
            value=app_state.get("rental_cost_per_m2"),
            step=50,
            min_value=1,
            format="%i",
            help=help_texts.get("rental_cost_per_m2", "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –∑–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä."),
        )
        app_state.set("rental_cost_per_m2", rental_cost_per_m2)
        if rental_cost_per_m2 <= 0:
            st.error("–ê—Ä–µ–Ω–¥–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")

        useful_area_ratio_slider = st.slider(
            "–î–æ–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ (%)",
            40,
            80,
            int(app_state.get("useful_area_ratio") * 100),
            5,
             help=help_texts.get("useful_area_ratio", "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ —Å–∫–ª–∞–¥–∞.")
        )
        useful_area_ratio = useful_area_ratio_slider / 100.0
        app_state.set("useful_area_ratio", useful_area_ratio)

    with st.sidebar.expander("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏", expanded=False):
        mode = st.radio(
            "–†–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            ["–†—É—á–Ω–æ–π", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"],
            index=0,
            help=help_texts.get("mode", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π: —Ä—É—á–Ω–æ–π –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"),
        )
        app_state.set("mode", mode)

        if mode == "–†—É—á–Ω–æ–π":
            st.markdown("#### –†—É—á–Ω–æ–π –≤–≤–æ–¥ (–º¬≤)")
            temp_usable = total_area * useful_area_ratio

            col1, col2 = st.columns(2)
            storage_area_manual = col1.number_input(
                "–ü—Ä–æ—Å—Ç–æ–µ, –º¬≤",
                value=app_state.get("storage_area_manual"),
                step=10.0,
                min_value=0.0,
                format="%.2f",
                help=help_texts.get("storage_area_manual", "–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ."),
            )
            app_state.set("storage_area_manual", storage_area_manual)

            loan_area_manual = col2.number_input(
                "–ó–∞–π–º—ã, –º¬≤",
                value=app_state.get("loan_area_manual"),
                step=10.0,
                min_value=0.0,
                format="%.2f",
                help=help_texts.get("loan_area_manual", "–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∑–∞–π–º—ã."),
            )
            app_state.set("loan_area_manual", loan_area_manual)

            col3, col4 = st.columns(2)
            vip_area_manual = col3.number_input(
                "VIP, –º¬≤",
                value=app_state.get("vip_area_manual"),
                step=10.0,
                min_value=0.0,
                format="%.2f",
                 help=help_texts.get("vip_area_manual", "–ü–ª–æ—â–∞–¥—å –ø–æ–¥ VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
            )
            app_state.set("vip_area_manual", vip_area_manual)

            short_term_area_manual = col4.number_input(
                "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ, –º¬≤",
                value=app_state.get("short_term_area_manual"),
                step=10.0,
                min_value=0.0,
                format="%.2f",
                help=help_texts.get("short_term_area_manual", "–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ."),
            )
            app_state.set("short_term_area_manual", short_term_area_manual)

            total_manual_set = (
                storage_area_manual
                + loan_area_manual
                + vip_area_manual
                + short_term_area_manual
            )
            leftover = temp_usable - total_manual_set
            st.write(f"–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {leftover:.2f} –º¬≤ –∏–∑ {temp_usable:.2f} –º¬≤.")
        else:
            st.write("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–æ–ª—è–º.")

    with st.sidebar.expander("### –¢–∞—Ä–∏—Ñ—ã –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏", expanded=False):
        storage_fee = st.number_input(
            "–¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ (—Ä—É–±./–º¬≤/–º–µ—Å.)",
            value=app_state.get("storage_fee"),
            step=100,
            min_value=0,
            format="%i",
            help=help_texts.get("storage_fee", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∑–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–∫–ª–∞–¥ (—Ä—É–±./–º¬≤)."),
        )
        app_state.set("storage_fee", storage_fee)

        col1, col2 = st.columns(2)
        shelves_per_m2 = col1.number_input(
            "–ü–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤",
            value=app_state.get("shelves_per_m2"),
            step=1,
            min_value=1,
            max_value=100,
            format="%i",
            help=help_texts.get("shelves_per_m2", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤."),
        )
        app_state.set("shelves_per_m2", shelves_per_m2)

        short_term_daily_rate = col2.number_input(
            "–¢–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä. (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)",
            value=app_state.get("short_term_daily_rate"),
            step=10.0,
            min_value=0.0,
            format="%.2f",
            help=help_texts.get("short_term_daily_rate", "–¢–∞—Ä–∏—Ñ –∑–∞ 1 –º¬≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–µ–Ω—å."),
        )
        app_state.set("short_term_daily_rate", short_term_daily_rate)

        vip_extra_fee = st.number_input(
            "–ù–∞—Ü–µ–Ω–∫–∞ VIP (—Ä—É–±./–º¬≤/–º–µ—Å.)",
            value=app_state.get("vip_extra_fee"),
            step=50.0,
            min_value=0.0,
            format="%.2f",
            help=help_texts.get("vip_extra_fee", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –¥–ª—è VIP-—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±./–º¬≤)."),
        )
        app_state.set("vip_extra_fee", vip_extra_fee)

    with st.sidebar.expander("### –û—Ü–µ–Ω–∫–∞ –∏ –∑–∞–π–º—ã", expanded=False):
        item_evaluation_slider = st.slider(
            "–û—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (%)",
            0,
            100,
            int(app_state.get("item_evaluation") * 100),
            5,
            help=help_texts.get("item_evaluation", "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –ø–æ–¥ –∑–∞–ª–æ–≥."),
        )
        item_evaluation = item_evaluation_slider / 100.0
        app_state.set("item_evaluation", item_evaluation)

        item_realization_markup = st.number_input(
            "–ù–∞—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (%)",
            value=app_state.get("item_realization_markup"),
            step=5.0,
            min_value=0.0,
            max_value=100.0,
            format="%.1f",
            help=help_texts.get("item_realization_markup", "–ù–∞—Ü–µ–Ω–∫–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º–∞—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—â–µ–π."),
        )
        app_state.set("item_realization_markup", item_realization_markup)

        average_item_value = st.number_input(
            "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (—Ä—É–±.)",
            value=app_state.get("average_item_value"),
            step=500,
            min_value=0,
            format="%i",
            help=help_texts.get("average_item_value", "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≤–µ—â–∏ (—Ä—É–±.)."),
        )
        app_state.set("average_item_value", average_item_value)

        loan_interest_rate = st.number_input(
            "–°—Ç–∞–≤–∫–∞ –∑–∞–π–º–æ–≤ (%/–¥–µ–Ω—å)",
            value=app_state.get("loan_interest_rate"),
            step=0.01,
            min_value=0.0,
            format="%.3f",
           help=help_texts.get("loan_interest_rate", "–î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–π–º–æ–≤."),
        )
        app_state.set("loan_interest_rate", loan_interest_rate)

        loan_term_days = st.number_input(
            "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ (–¥–Ω–∏)",
            value=app_state.get("loan_term_days"),
            step=1,
            min_value=1,
            format="%i",
             help=help_texts.get("loan_term_days", "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ –≤ –¥–Ω—è—Ö."),
        )
        app_state.set("loan_term_days", loan_term_days)

    with st.sidebar.expander("### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è (%)", expanded=False):
        realization_share_storage_slider = st.slider(
            "–ü—Ä–æ—Å—Ç–æ–µ",
            0,
            100,
            int(app_state.get("realization_share_storage") * 100),
            5,
            help=help_texts.get("realization_share_storage", "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—â–µ–π –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è, –∏–¥—É—â–∏—Ö –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."),
        )
        realization_share_storage = realization_share_storage_slider / 100.0
        app_state.set("realization_share_storage", realization_share_storage)

        realization_share_loan_slider = st.slider(
            "–ó–∞–π–º—ã",
            0,
            100,
            int(app_state.get("realization_share_loan") * 100),
            5,
            help=help_texts.get("realization_share_loan", "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—â–µ–π –∏–∑ –∑–∞–π–º–æ–≤, –∏–¥—É—â–∏—Ö –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."),
        )
        realization_share_loan = realization_share_loan_slider / 100.0
        app_state.set("realization_share_loan", realization_share_loan)

        realization_share_vip_slider = st.slider(
            "VIP",
            0,
            100,
            int(app_state.get("realization_share_vip") * 100),
            5,
             help=help_texts.get("realization_share_vip", "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—â–µ–π –∏–∑ VIP-—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∏–¥—É—â–∏—Ö –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."),
        )
        realization_share_vip = realization_share_vip_slider / 100.0
        app_state.set("realization_share_vip", realization_share_vip)

        realization_share_short_term_slider = st.slider(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ",
            0,
            100,
            int(app_state.get("realization_share_short_term") * 100),
            5,
            help=help_texts.get("realization_share_short_term", "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—â–µ–π –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."),
        )
        realization_share_short_term = realization_share_short_term_slider / 100.0
        app_state.set("realization_share_short_term", realization_share_short_term)

    with st.sidebar.expander("### –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏", expanded=False):
        storage_fill_rate_slider = st.slider(
            "–ü—Ä–æ—Å—Ç–æ–µ",
            0,
            100,
            int(app_state.get("storage_fill_rate") * 100),
            5,
           help=help_texts.get("storage_fill_rate", "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."),
        )
        storage_fill_rate = storage_fill_rate_slider / 100.0
        app_state.set("storage_fill_rate", storage_fill_rate)

        loan_fill_rate_slider = st.slider(
            "–ó–∞–π–º—ã",
            0,
            100,
            int(app_state.get("loan_fill_rate") * 100),
            5,
            help=help_texts.get("loan_fill_rate", "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –∑–∞–π–º–æ–≤."),
        )
        loan_fill_rate = loan_fill_rate_slider / 100.0
        app_state.set("loan_fill_rate", loan_fill_rate)

        vip_fill_rate_slider = st.slider(
            "VIP",
            0,
            100,
            int(app_state.get("vip_fill_rate") * 100),
            5,
            help=help_texts.get("vip_fill_rate", "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è VIP-—Å–µ–∫—Ü–∏–∏."),
        )
        vip_fill_rate = vip_fill_rate_slider / 100.0
        app_state.set("vip_fill_rate", vip_fill_rate)

        short_term_fill_rate_slider = st.slider(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ",
            0,
            100,
            int(app_state.get("short_term_fill_rate") * 100),
            5,
             help=help_texts.get("short_term_fill_rate", "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."),
        )
        short_term_fill_rate = short_term_fill_rate_slider / 100.0
        app_state.set("short_term_fill_rate", short_term_fill_rate)

    with st.sidebar.expander("### –ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≤–µ—â–µ–π/–º¬≤)", expanded=False):
        storage_items_density = st.number_input(
            "–ü—Ä–æ—Å—Ç–æ–µ",
            value=app_state.get("storage_items_density"),
            step=1,
            min_value=1,
            format="%i",
             help=help_texts.get("storage_items_density", "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–µ—â–µ–π –Ω–∞ –º¬≤) –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."),
        )
        app_state.set("storage_items_density", storage_items_density)

        loan_items_density = st.number_input(
            "–ó–∞–π–º—ã",
            value=app_state.get("loan_items_density"),
            step=1,
            min_value=1,
            format="%i",
             help=help_texts.get("loan_items_density", "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–π–º–æ–≤ (–≤–µ—â–∏/–º¬≤)."),
        )
        app_state.set("loan_items_density", loan_items_density)

        vip_items_density = st.number_input(
            "VIP",
            value=app_state.get("vip_items_density"),
            step=1,
            min_value=1,
            format="%i",
             help=help_texts.get("vip_items_density", "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è VIP (–≤–µ—â–∏/–º¬≤)."),
        )
        app_state.set("vip_items_density", vip_items_density)

        short_term_items_density = st.number_input(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ",
            value=app_state.get("short_term_items_density"),
            step=1,
            min_value=1,
            format="%i",
            help=help_texts.get("short_term_items_density", "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ (–≤–µ—â–∏/–º¬≤)."),
        )
        app_state.set("short_term_items_density", short_term_items_density)

    with st.sidebar.expander("### –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤/–≤–µ—â–µ–π (%)", expanded=False):
        storage_monthly_churn_num = st.number_input(
            "–ü—Ä–æ—Å—Ç–æ–µ (%)",
            value=app_state.get("storage_monthly_churn") * 100,
            step=0.1,
            min_value=0.0,
            max_value=100.0,
            format="%.1f",
            help=help_texts.get("storage_monthly_churn", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."),
        )
        storage_monthly_churn = storage_monthly_churn_num / 100.0
        app_state.set("storage_monthly_churn", storage_monthly_churn)

        loan_monthly_churn_num = st.number_input(
            "–ó–∞–π–º—ã (%)",
            value=app_state.get("loan_monthly_churn") * 100,
            step=0.1,
            min_value=0.0,
            max_value=100.0,
            format="%.1f",
            help=help_texts.get("loan_monthly_churn", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –ø–æ –∑–∞–π–º–∞–º."),
        )
        loan_monthly_churn = loan_monthly_churn_num / 100.0
        app_state.set("loan_monthly_churn", loan_monthly_churn)

        vip_monthly_churn_num = st.number_input(
            "VIP (%)",
            value=app_state.get("vip_monthly_churn") * 100,
            step=0.1,
            min_value=0.0,
            max_value=100.0,
            format="%.1f",
             help=help_texts.get("vip_monthly_churn", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ VIP-—Å–µ–∫—Ü–∏–∏."),
        )
        vip_monthly_churn = vip_monthly_churn_num / 100.0
        app_state.set("vip_monthly_churn", vip_monthly_churn)

        short_term_monthly_churn_num = st.number_input(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (%)",
            value=app_state.get("short_term_monthly_churn") * 100,
            step=0.1,
            min_value=0.0,
            max_value=100.0,
            format="%.1f",
             help=help_texts.get("short_term_monthly_churn", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—é."),
        )
        short_term_monthly_churn = short_term_monthly_churn_num / 100.0
        app_state.set("short_term_monthly_churn", short_term_monthly_churn)

    with st.sidebar.expander("### –§–∏–Ω–∞–Ω—Å—ã (–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ)", expanded=False):
        salary_expense = st.number_input(
            "–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("salary_expense"),
            step=10000,
            min_value=0,
            format="%i",
            help=help_texts.get("salary_expense", "–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É (—Ä—É–±./–º–µ—Å.)."),
        )
        app_state.set("salary_expense", salary_expense)

        miscellaneous_expenses = st.number_input(
            "–ü—Ä–æ—á–∏–µ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("miscellaneous_expenses"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("miscellaneous_expenses", "–ü—Ä–æ—á–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã."),
        )
        app_state.set("miscellaneous_expenses", miscellaneous_expenses)

        depreciation_expense = st.number_input(
            "–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("depreciation_expense"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("depreciation_expense", "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è."),
        )
        app_state.set("depreciation_expense", depreciation_expense)

        marketing_expenses = st.number_input(
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("marketing_expenses"),
            step=5000,
            min_value=0,
            format="%i",
             help=help_texts.get("marketing_expenses", "–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥."),
        )
        app_state.set("marketing_expenses", marketing_expenses)

        insurance_expenses = st.number_input(
            "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("insurance_expenses"),
            step=1000,
            min_value=0,
            format="%i",
            help=help_texts.get("insurance_expenses", "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞."),
        )
        app_state.set("insurance_expenses", insurance_expenses)

        taxes = st.number_input(
            "–ù–∞–ª–æ–≥–∏ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("taxes"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("taxes", "–ù–∞–ª–æ–≥–æ–≤—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è (—Ä—É–±./–º–µ—Å.)."),
        )
        app_state.set("taxes", taxes)

        utilities_expenses = st.number_input(
            "–ö–æ–º–º—É–Ω–∞–ª–∫–∞ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("utilities_expenses"),
            step=5000,
            min_value=0,
            format="%i",
             help=help_texts.get("utilities_expenses", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (—Ä—É–±./–º–µ—Å.)."),
        )
        app_state.set("utilities_expenses", utilities_expenses)

        maintenance_expenses = st.number_input(
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
            value=app_state.get("maintenance_expenses"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("maintenance_expenses", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ (—Ä—É–±./–º–µ—Å)."),
        )
        app_state.set("maintenance_expenses", maintenance_expenses)

    with st.sidebar.expander("### –§–∏–Ω–∞–Ω—Å—ã (–µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ)", expanded=False):
        one_time_setup_cost = st.number_input(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä—É–±.)",
            value=app_state.get("one_time_setup_cost"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("one_time_setup_cost", "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∫–ª–∞–¥–∞."),
        )
        app_state.set("one_time_setup_cost", one_time_setup_cost)

        one_time_equipment_cost = st.number_input(
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä—É–±.)",
            value=app_state.get("one_time_equipment_cost"),
            step=5000,
            min_value=0,
            format="%i",
             help=help_texts.get("one_time_equipment_cost", "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ."),
        )
        app_state.set("one_time_equipment_cost", one_time_equipment_cost)

        one_time_other_costs = st.number_input(
            "–î—Ä—É–≥–∏–µ (—Ä—É–±.)",
            value=app_state.get("one_time_other_costs"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("one_time_other_costs", "–ü—Ä–æ—á–∏–µ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã."),
        )
        app_state.set("one_time_other_costs", one_time_other_costs)

        one_time_legal_cost = st.number_input(
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ (—Ä—É–±.)",
            value=app_state.get("one_time_legal_cost"),
            step=5000,
            min_value=0,
            format="%i",
             help=help_texts.get("one_time_legal_cost", "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã."),
        )
        app_state.set("one_time_legal_cost", one_time_legal_cost)

        one_time_logistics_cost = st.number_input(
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ (—Ä—É–±.)",
            value=app_state.get("one_time_logistics_cost"),
            step=5000,
            min_value=0,
            format="%i",
            help=help_texts.get("one_time_logistics_cost", "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã."),
        )
        app_state.set("one_time_logistics_cost", one_time_logistics_cost)

    with st.sidebar.expander("### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", expanded=False):
        packaging_cost_per_m2 = st.number_input(
            "–£–ø–∞–∫–æ–≤–∫–∞ (—Ä—É–±./–º¬≤)",
            value=app_state.get("packaging_cost_per_m2"),
            step=5.0,
            min_value=0.0,
            format="%.2f",
            help=help_texts.get("packaging_cost_per_m2", "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ 1 –º¬≤ –ø–ª–æ—â–∞–¥–∏."),
        )
        app_state.set("packaging_cost_per_m2", packaging_cost_per_m2)

        electricity_cost_per_m2 = st.number_input(
            "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (—Ä—É–±./–º¬≤)",
            value=app_state.get("electricity_cost_per_m2"),
            step=10.0,
            min_value=0.0,
            format="%.1f",
            help=help_texts.get("electricity_cost_per_m2", "–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ 1 –º¬≤."),
        )
        app_state.set("electricity_cost_per_m2", electricity_cost_per_m2)

    with st.sidebar.expander("### –ò–Ω—Ñ–ª—è—Ü–∏—è –∏ —Ä–æ—Å—Ç", expanded=False):
        monthly_inflation_rate_val = st.number_input(
            "–ò–Ω—Ñ–ª—è—Ü–∏—è (%/–º–µ—Å.)",
            value=app_state.get("monthly_inflation_rate") * 100,
            step=0.1,
            min_value=0.0,
            format="%.1f",
             help=help_texts.get("monthly_inflation_rate", "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è (%)."),
        )
        monthly_inflation_rate = monthly_inflation_rate_val / 100.0
        app_state.set("monthly_inflation_rate", monthly_inflation_rate)

        monthly_rent_growth_val = st.number_input(
            "–†–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã (%/–º–µ—Å.)",
            value=app_state.get("monthly_rent_growth") * 100,
            step=0.5,
            min_value=0.0,
            format="%.1f",
            help=help_texts.get("monthly_rent_growth", "–†–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã –≤ –º–µ—Å—è—Ü (%)."),
        )
        monthly_rent_growth = monthly_rent_growth_val / 100.0
        app_state.set("monthly_rent_growth", monthly_rent_growth)

        monthly_salary_growth_val = st.number_input(
            "–†–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã (%/–º–µ—Å.)",
            value=app_state.get("monthly_salary_growth") * 100,
            step=0.1,
            min_value=0.0,
            format="%.1f",
           help=help_texts.get("monthly_salary_growth", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã (%)."),
        )
        monthly_salary_growth = monthly_salary_growth_val / 100.0
        app_state.set("monthly_salary_growth", monthly_salary_growth)

        monthly_other_expenses_growth_val = st.number_input(
            "–†–æ—Å—Ç –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
            value=app_state.get("monthly_other_expenses_growth") * 100,
            step=0.1,
            min_value=0.0,
            format="%.1f",
            help=help_texts.get("monthly_other_expenses_growth", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (%)."),
        )
        monthly_other_expenses_growth = monthly_other_expenses_growth_val / 100.0
        app_state.set("monthly_other_expenses_growth", monthly_other_expenses_growth)

    with st.sidebar.expander("### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", expanded=False):
        disable_extended = st.checkbox(
            "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
            value=app_state.get("disable_extended"),
            help=help_texts.get("disable_extended", "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.")
        )
        app_state.set("disable_extended", disable_extended)

        amortize_one_time_expenses = st.checkbox(
            "–ê–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
            value=app_state.get("amortize_one_time_expenses"),
            help=help_texts.get("amortize_one_time_expenses", "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–∏–∑–æ–Ω—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        )
        app_state.set("amortize_one_time_expenses", amortize_one_time_expenses)

        if not disable_extended:
            time_horizon_val = st.slider(
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å.)",
                1,
                24,
                value=app_state.get("time_horizon"),
                help=help_texts.get("time_horizon", "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º."),
            )
            app_state.set("time_horizon", time_horizon_val)

            default_probability_val = st.number_input(
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (%)",
                value=app_state.get("default_probability") * 100,
                step=1.0,
                min_value=0.0,
                max_value=100.0,
                format="%.1f",
                help=help_texts.get("default_probability", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (–¥–ª—è –∑–∞–π–º–æ–≤)."),
            )
            default_probability = default_probability_val / 100.0
            app_state.set("default_probability", default_probability)

            liquidity_factor_val = st.number_input(
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏",
                value=app_state.get("liquidity_factor"),
                step=0.1,
                min_value=0.1,
                format="%.1f",
               help=help_texts.get("liquidity_factor", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."),
            )
            app_state.set("liquidity_factor", liquidity_factor_val)

            safety_factor_val = st.number_input(
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞",
                value=app_state.get("safety_factor"),
                step=0.1,
                min_value=0.1,
                format="%.1f",
                help=help_texts.get("safety_factor", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏."),
            )
            app_state.set("safety_factor", safety_factor_val)

            loan_grace_period_val = st.number_input(
                "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å.)",
                value=app_state.get("loan_grace_period"),
                step=1,
                min_value=0,
                format="%i",
                help=help_texts.get("loan_grace_period", "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ –∑–∞–π–º–∞–º (–º–µ—Å)."),
            )
            app_state.set("loan_grace_period", loan_grace_period_val)

            monthly_income_growth_val = st.number_input(
                "–†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
                value=app_state.get("monthly_income_growth") * 100,
                step=0.5,
                format="%.1f",
               help=help_texts.get("monthly_income_growth", "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ –≤ –º–µ—Å—è—Ü."),
            )
            monthly_income_growth = monthly_income_growth_val / 100.0
            app_state.set("monthly_income_growth", monthly_income_growth)

            monthly_expenses_growth_val = st.number_input(
                "–†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)",
                value=app_state.get("monthly_expenses_growth") * 100,
                step=0.5,
                format="%.1f",
               help=help_texts.get("monthly_expenses_growth", "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –º–µ—Å—è—Ü."),
            )
            monthly_expenses_growth = monthly_expenses_growth_val / 100.0
            app_state.set("monthly_expenses_growth", monthly_expenses_growth)
        else:
            app_state.set("time_horizon", 1)
            app_state.set("default_probability", 0.0)
            app_state.set("liquidity_factor", 1.0)
            app_state.set("safety_factor", 1.2)
            app_state.set("loan_grace_period", 0)
            app_state.set("monthly_income_growth", 0.0)
            app_state.set("monthly_expenses_growth", 0.0)

        fm_options = [
            "–ë–∞–∑–æ–≤—ã–π",
            "ML (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)",
            "ML (–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)",
            "–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ",
            "ML (—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å)",
            "ML (SVR)",
        ]
        current_fm = app_state.get("forecast_method") or "–ë–∞–∑–æ–≤—ã–π"
        fm_index = fm_options.index(current_fm) if current_fm in fm_options else 0
        forecast_method_sel = st.selectbox(
            "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
            fm_options,
            index=fm_index,
            help=help_texts.get("forecast_method", "–ú–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞."),
        )
        app_state.set("forecast_method", forecast_method_sel)

        if forecast_method_sel == "–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ":
            monte_carlo_simulations_val = st.number_input(
                "–°–∏–º—É–ª—è—Ü–∏–π –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ",
                value=app_state.get("monte_carlo_simulations"),
                step=10,
                min_value=10,
                format="%i",
                help=help_texts.get("monte_carlo_simulations", "–ß–∏—Å–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π –≤ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ."),
            )
            app_state.set("monte_carlo_simulations", monte_carlo_simulations_val)

            monte_carlo_deviation_val = st.number_input(
                "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (0.1 = ¬±10%)",
                value=app_state.get("monte_carlo_deviation"),
                step=0.01,
                min_value=0.01,
                format="%.2f",
                help=help_texts.get("monte_carlo_deviation", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (0.1 = ¬±10%)."),
            )
            app_state.set("monte_carlo_deviation", monte_carlo_deviation_val)

            monte_carlo_seed_val = st.number_input(
                "–ó–Ω–∞—á–µ–Ω–∏–µ Seed",
                value=app_state.get("monte_carlo_seed"),
                step=1,
                format="%i",
                 help=help_texts.get("monte_carlo_seed", "–ó–µ—Ä–Ω–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)."),
            )
            app_state.set("monte_carlo_seed", monte_carlo_seed_val)

            mc_dist_options = ["–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ"]
            current_dist = app_state.get("monte_carlo_distribution") or "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ"
            mc_dist_index = mc_dist_options.index(current_dist) if current_dist in mc_dist_options else 0
            monte_carlo_distribution_sel = st.selectbox(
                "–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
                mc_dist_options,
                index=mc_dist_index,
                help=help_texts.get("monte_carlo_distribution", "–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ."),
            )
            app_state.set("monte_carlo_distribution", monte_carlo_distribution_sel)

            if monte_carlo_distribution_sel == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
                mc_normal_mean_val = st.number_input(
                    "–°—Ä–µ–¥–Ω–µ–µ (–Ω–æ—Ä–º. —Ä–∞—Å–ø—Ä.)",
                    value=app_state.get("monte_carlo_normal_mean") or 0.0,
                    step=0.1,
                    format="%.1f",
                     help=help_texts.get("monte_carlo_normal_mean", "–°—Ä–µ–¥–Ω–µ–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."),
                )
                app_state.set("monte_carlo_normal_mean", mc_normal_mean_val)

                mc_normal_std_val = st.number_input(
                    "–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–Ω–æ—Ä–º. —Ä–∞—Å–ø—Ä.)",
                    value=app_state.get("monte_carlo_normal_std") or 0.1,
                    step=0.01,
                    min_value=0.01,
                    format="%.2f",
                    help=help_texts.get("monte_carlo_normal_std", "–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."),
                )
                app_state.set("monte_carlo_normal_std", mc_normal_std_val)

            if monte_carlo_distribution_sel == "–¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ":
                mc_triang_left_val = st.number_input(
                    "–ú–∏–Ω. –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)",
                    value=app_state.get("monte_carlo_triang_left") or 0.0,
                    step=0.1,
                    format="%.1f",
                     help=help_texts.get("monte_carlo_triang_left", "–ú–∏–Ω. –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."),
                )
                app_state.set("monte_carlo_triang_left", mc_triang_left_val)

                mc_triang_mode_val = st.number_input(
                    "–ú–æ–¥–∞ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)",
                    value=app_state.get("monte_carlo_triang_mode") or 1.0,
                    step=0.1,
                    format="%.1f",
                    help=help_texts.get("monte_carlo_triang_mode", "–ú–æ–¥–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."),
                )
                app_state.set("monte_carlo_triang_mode", mc_triang_mode_val)

                mc_triang_right_val = st.number_input(
                    "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç—Ä–µ—É–≥. —Ä–∞—Å–ø—Ä.)",
                    value=app_state.get("monte_carlo_triang_right") or 2.0,
                    step=0.1,
                    format="%.1f",
                    help=help_texts.get("monte_carlo_triang_right", "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."),
                )
                app_state.set("monte_carlo_triang_right", mc_triang_right_val)

        enable_ml_settings_val = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ML-–ø—Ä–æ–≥–Ω–æ–∑",
            value=app_state.get("enable_ml_settings"),
            help=help_texts.get("enable_ml_settings", "–í–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞.")
        )
        app_state.set("enable_ml_settings", enable_ml_settings_val)

        if forecast_method_sel == "ML (–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)" and enable_ml_settings_val:
            poly_degree_val = st.number_input(
                "–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞",
                min_value=1,
                max_value=5,
                value=app_state.get("poly_degree") or 2,
                step=1,
                format="%i",
                help=help_texts.get("poly_degree", "–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞ –¥–ª—è –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏."),
            )
            app_state.set("poly_degree", poly_degree_val)
        else:
            app_state.set("poly_degree", 2)

        if forecast_method_sel == "ML (—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å)" and enable_ml_settings_val:
            n_estimators_val = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ RF",
                min_value=10,
                max_value=500,
                value=app_state.get("n_estimators") or 100,
                step=10,
                format="%i",
                help=help_texts.get("n_estimators", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ RF."),
            )
            app_state.set("n_estimators", n_estimators_val)

            features_options = ["–ú–µ—Å—è—Ü", "Lag_1", "Lag_2", "Rolling_Mean_3", "Rolling_Mean_5"]
            selected_features = st.multiselect(
                "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                options=features_options,
                default=features_options,
                help=help_texts.get("features", "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏."),
            )
            app_state.set("features", selected_features)
        elif forecast_method_sel == "ML (SVR)" and enable_ml_settings_val:
            features_options = ["–ú–µ—Å—è—Ü", "Lag_1", "Lag_2", "Rolling_Mean_3", "Rolling_Mean_5"]
            selected_features = st.multiselect(
                "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                options=features_options,
                default=features_options,
                help=help_texts.get("features", "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏."),
            )
            app_state.set("features", selected_features)
        else:
            app_state.set("n_estimators", 100)
            app_state.set("features", ["–ú–µ—Å—è—Ü", "Lag_1", "Lag_2", "Rolling_Mean_3", "Rolling_Mean_5"])

        if forecast_method_sel in ["ML (—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å)", "ML (SVR)"] and enable_ml_settings_val:
            param_search_options = ["–ù–µ—Ç", "GridSearchCV", "RandomizedSearchCV"]
            param_search_method = st.selectbox(
                "–ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ML",
                param_search_options,
                index=0,
                 help=help_texts.get("param_search_method", "–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ML."),
            )
            app_state.set("param_search_method", param_search_method)

            auto_feature_selection_val = st.checkbox(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                value=app_state.get("auto_feature_selection"),
                 help=help_texts.get("auto_feature_selection", "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
            )
            app_state.set("auto_feature_selection", auto_feature_selection_val)
        else:
            app_state.set("param_search_method", "–ù–µ—Ç")
            app_state.set("auto_feature_selection", False)

    if enable_ml_settings_val and forecast_method_sel.startswith("ML"):
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV/Excel) –¥–ª—è ML",
            type=["csv", "xlsx"]
        )
        if uploaded_file is not None:
            file_extension = os.path.splitext(uploaded_file.name)[1]
            try:
                 with st.spinner("–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                    if file_extension == ".csv":
                        df_for_ml = pd.read_csv(uploaded_file)
                    elif file_extension == ".xlsx":
                        df_for_ml = pd.read_excel(uploaded_file)
                    else:
                        raise ValueError("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                    st.success("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è ML —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                    app_state.set("df_for_ml", df_for_ml)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                app_state.set("df_for_ml", None)
        else:
            app_state.set("df_for_ml", None)

        uploaded_model = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—É—é ML-–º–æ–¥–µ–ª—å (.pkl)",
            type=["pkl"]
        )
        app_state.set("uploaded_model", uploaded_model)
    else:
        app_state.set("df_for_ml", None)
        app_state.set("uploaded_model", None)

    st.sidebar.markdown("---")

    if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        if "saved_params" not in st.session_state:
            st.session_state.saved_params = {}
        param_name = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {len(st.session_state.saved_params) + 1}"
        
        params_to_save = {k: app_state.get(k) for k in default_params.keys()}
        params_to_save["shares"] = dict(app_state.shares)
        
        st.session_state.saved_params[param_name] = params_to_save
        st.success(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {param_name}")
    
    
    if "saved_params" in st.session_state and st.session_state.saved_params:
      selected_param = st.selectbox(
            "–°—Ä–∞–≤–Ω–∏—Ç—å —Å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏:",
            options=list(st.session_state.saved_params.keys()),
            index=0,
              )
      if st.button("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", key="rename_saved_params_button"):
          new_name = st.text_input("–ù–æ–≤–æ–µ –∏–º—è:", key="rename_param_input")
          if new_name:
             st.session_state.saved_params[new_name] = st.session_state.saved_params.pop(selected_param)
             st.success(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –Ω–∞ {new_name}")
             st.rerun()

    else:
        selected_param = None

    uploaded_file_sess = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON –∏–ª–∏ YAML)",
        type=["json", "yaml", "yml"]
    )
    if uploaded_file_sess:
        try:
             with st.spinner("–ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."):
                if uploaded_file_sess.name.endswith(".json"):
                    loaded_params = json.load(uploaded_file_sess)
                elif uploaded_file_sess.name.endswith((".yaml", ".yml")):
                    loaded_params = yaml.safe_load(uploaded_file_sess)
                else:
                    raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ JSON –∏–ª–∏ YAML.")
                for key, value in loaded_params.items():
                    if key in default_params:
                        app_state.set(key, value)
                if "shares" in loaded_params:
                    app_state.shares.update(loaded_params["shares"])
                st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª"):
        try:
            filename = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞", "warehouse_params")
            file_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ["json", "yaml"])
            if filename:
                params_to_save = {k: app_state.get(k) for k in default_params.keys()}
                params_to_save["shares"] = dict(app_state.shares)
                file_data = save_params_to_file(params_to_save, filename, file_format)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                    data=file_data,
                    file_name=f"{filename}.{file_format}",
                    mime=f"application/{file_format}",
                )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    if st.sidebar.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç"):
        one_time_sum = (
            app_state.get("one_time_setup_cost")
            + app_state.get("one_time_equipment_cost")
            + app_state.get("one_time_other_costs")
            + app_state.get("one_time_legal_cost")
            + app_state.get("one_time_logistics_cost")
        )
        monthly_sum = (
            app_state.get("salary_expense")
            + app_state.get("miscellaneous_expenses")
            + app_state.get("depreciation_expense")
            + app_state.get("marketing_expenses")
            + app_state.get("insurance_expenses")
            + app_state.get("taxes")
            + app_state.get("utilities_expenses")
            + app_state.get("maintenance_expenses")
        )
        st.sidebar.write(f"–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {one_time_sum:,.2f} —Ä—É–±.")
        st.sidebar.write(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {monthly_sum:,.2f} —Ä—É–±.")

    if st.sidebar.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É–≥–ª—É–±–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç"):
        one_time_sum2 = (
            app_state.get("one_time_setup_cost")
            + app_state.get("one_time_equipment_cost")
            + app_state.get("one_time_other_costs")
            + app_state.get("one_time_legal_cost")
            + app_state.get("one_time_logistics_cost")
        )
        monthly_sum2 = (
            app_state.get("salary_expense")
            + app_state.get("miscellaneous_expenses")
            + app_state.get("depreciation_expense")
            + app_state.get("marketing_expenses")
            + app_state.get("insurance_expenses")
            + app_state.get("taxes")
            + app_state.get("utilities_expenses")
            + app_state.get("maintenance_expenses")
        )
        difference = one_time_sum2 - monthly_sum2
        st.sidebar.write("## –£–≥–ª—É–±–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç")
        st.sidebar.write(f"–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ vs. –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ, —Ä–∞–∑–Ω–∏—Ü–∞: {difference:,.2f} —Ä—É–±.")
    
    if enable_ml_settings_val and forecast_method_sel.startswith("ML"):
       if st.session_state.get("uploaded_model") is not None:
             st.sidebar.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {st.session_state.get('uploaded_model').name}")
       if st.session_state.get("df_for_ml") is not None:
             st.sidebar.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {st.session_state.get('df_for_ml').name if hasattr(st.session_state.get('df_for_ml'),'name') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
forecast_method = app_state.get("forecast_method") or "–ë–∞–∑–æ–≤—ã–π"
params = WarehouseParams(
    total_area=app_state.get("total_area"),
    rental_cost_per_m2=app_state.get("rental_cost_per_m2"),
    useful_area_ratio=app_state.get("useful_area_ratio"),
    mode=app_state.get("mode") or "–†—É—á–Ω–æ–π",
    storage_share=app_state.shares["storage_share"],
    loan_share=app_state.shares["loan_share"],
    vip_share=app_state.shares["vip_share"],
    short_term_share=app_state.shares["short_term_share"],
    storage_area_manual=app_state.get("storage_area_manual"),
    loan_area_manual=app_state.get("loan_area_manual"),
    vip_area_manual=app_state.get("vip_area_manual"),
    short_term_area_manual=app_state.get("short_term_area_manual"),
    storage_fee=app_state.get("storage_fee"),
    shelves_per_m2=app_state.get("shelves_per_m2"),
    short_term_daily_rate=app_state.get("short_term_daily_rate"),
    vip_extra_fee=app_state.get("vip_extra_fee"),
    item_evaluation=app_state.get("item_evaluation"),
    item_realization_markup=app_state.get("item_realization_markup"),
    average_item_value=app_state.get("average_item_value"),
    loan_interest_rate=app_state.get("loan_interest_rate"),
    loan_term_days=app_state.get("loan_term_days"),
    realization_share_storage=app_state.get("realization_share_storage"),
    realization_share_loan=app_state.get("realization_share_loan"),
    realization_share_vip=app_state.get("realization_share_vip"),
    realization_share_short_term=app_state.get("realization_share_short_term"),
    storage_items_density=app_state.get("storage_items_density"),
    loan_items_density=app_state.get("loan_items_density"),
    vip_items_density=app_state.get("vip_items_density"),
    short_term_items_density=app_state.get("short_term_items_density"),
    storage_fill_rate=app_state.get("storage_fill_rate"),
    loan_fill_rate=app_state.get("loan_fill_rate"),
    vip_fill_rate=app_state.get("vip_fill_rate"),
    short_term_fill_rate=app_state.get("short_term_fill_rate"),
    storage_monthly_churn=app_state.get("storage_monthly_churn"),
    loan_monthly_churn=app_state.get("loan_monthly_churn"),
    vip_monthly_churn=app_state.get("vip_monthly_churn"),
    short_term_monthly_churn=app_state.get("short_term_monthly_churn"),
    salary_expense=app_state.get("salary_expense"),
    miscellaneous_expenses=app_state.get("miscellaneous_expenses"),
    depreciation_expense=app_state.get("depreciation_expense"),
    marketing_expenses=app_state.get("marketing_expenses"),
    insurance_expenses=app_state.get("insurance_expenses"),
    taxes=app_state.get("taxes"),
    utilities_expenses=app_state.get("utilities_expenses"),
    maintenance_expenses=app_state.get("maintenance_expenses"),
    one_time_setup_cost=app_state.get("one_time_setup_cost"),
    one_time_equipment_cost=app_state.get("one_time_equipment_cost"),
    one_time_other_costs=app_state.get("one_time_other_costs"),
    one_time_legal_cost=app_state.get("one_time_legal_cost"),
    one_time_logistics_cost=app_state.get("one_time_logistics_cost"),
    time_horizon=app_state.get("time_horizon"),
    monthly_rent_growth=app_state.get("monthly_rent_growth"),
    default_probability=app_state.get("default_probability"),
    liquidity_factor=app_state.get("liquidity_factor"),
    safety_factor=app_state.get("safety_factor"),
    loan_grace_period=app_state.get("loan_grace_period"),
    monthly_income_growth=app_state.get("monthly_income_growth"),
    monthly_expenses_growth=app_state.get("monthly_expenses_growth"),
    forecast_method=forecast_method,
    monte_carlo_simulations=app_state.get("monte_carlo_simulations"),
    monte_carlo_deviation=app_state.get("monte_carlo_deviation"),
    monte_carlo_seed=app_state.get("monte_carlo_seed"),
    enable_ml_settings=app_state.get("enable_ml_settings"),
    electricity_cost_per_m2=app_state.get("electricity_cost_per_m2"),
    monthly_inflation_rate=app_state.get("monthly_inflation_rate"),
    monthly_salary_growth=app_state.get("monthly_salary_growth"),
    monthly_other_expenses_growth=app_state.get("monthly_other_expenses_growth"),
    packaging_cost_per_m2=app_state.get("packaging_cost_per_m2"),
    poly_degree=poly_degree,
    n_estimators=n_estimators,
    features=features,
    monte_carlo_distribution=app_state.get("monte_carlo_distribution"),
    monte_carlo_normal_mean=app_state.get("monte_carlo_normal_mean"),
    monte_carlo_normal_std=app_state.get("monte_carlo_normal_std"),
    monte_carlo_triang_left=app_state.get("monte_carlo_triang_left"),
    monte_carlo_triang_mode=app_state.get("monte_carlo_triang_mode"),
    monte_carlo_triang_right=app_state.get("monte_carlo_triang_right"),
    auto_feature_selection=auto_feature_selection,
    param_search_method=app_state.get("param_search_method")
)
amortize_one_time_expenses = app_state.get("amortize_one_time_expenses")
is_valid, error_message = validate_inputs(params)
if not is_valid:
    st.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {error_message}")
else:
    areas = calculate_areas(params)
    for k, v in areas.items():
        setattr(params, k, v)

    st.markdown("---")
    st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É:")
    if "active_tab" not in st.session_state:
        st.session_state.active_tab = "–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"

    tabs_list = [
        "–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏",
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è",
         "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
         "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
         "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
         "–î–∞—à–±–æ—Ä–¥"
    ]
    chosen = st.radio(
        "–í–∫–ª–∞–¥–∫–∏:",
        tabs_list,
        index=tabs_list.index(st.session_state.active_tab),
        key="active_tab",
        horizontal=True
    )

    if chosen == "–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        base_financials = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        irr_val = calculate_irr(
            [
                -params.one_time_setup_cost - params.one_time_equipment_cost
                - params.one_time_other_costs - params.one_time_legal_cost
                - params.one_time_logistics_cost
            ]
            + [base_financials["profit"]] * params.time_horizon
        )
        pm, pr = calculate_additional_metrics(
            base_financials["total_income"],
            base_financials["total_expenses"],
            base_financials["profit"]
        )
        roi_val = calculate_roi(base_financials["total_income"], base_financials["total_expenses"])
        npv_val = calculate_npv(
            [
                -params.one_time_setup_cost - params.one_time_equipment_cost
                - params.one_time_other_costs - params.one_time_legal_cost
                - params.one_time_logistics_cost
            ]
            + [base_financials["profit"]] * params.time_horizon,
            0.05
        )
        tab_container = st.container()
        display_tab1(
            tab_container,
            base_financials,
            pm,
            pr,
            roi_val,
            irr_val,
            params,
            selected_param=None,
            main_color=app_state.get("main_color") or "#007bff",
            npv=npv_val
        )

    elif chosen == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
        tab_container = st.container()
        base_financials = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        display_tab2_header(tab_container)

        if params.forecast_method == "–ë–∞–∑–æ–≤—ã–π":
            display_tab2_basic_forecast(tab_container, base_financials, params)
        elif params.forecast_method.startswith("ML"):
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª—å—é")
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
                if df_for_ml is not None:
                    try:
                        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                            new_model = train_ml_model(
                                df_for_ml,
                                target_column="–î–æ—Ö–æ–¥—ã",
                                model_type=params.forecast_method,
                                poly_degree=params.poly_degree,
                                n_estimators=params.n_estimators,
                                features=params.features,
                                param_search_method=params.param_search_method,
                                auto_feature_selection=params.auto_feature_selection
                            )
                            st.session_state["ml_model"] = new_model
                            st.success("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

            if st.session_state.get("ml_model") is not None:
                save_trained_model_to_file(
                    st.session_state["ml_model"],
                    filename="trained_model.pkl"
                )

            display_tab2_ml_forecast(
                tab_container,
                params.enable_ml_settings,
                selected_forecast_method,
                st.session_state.get("ml_model"),
                df_for_ml,
                params,
                base_financials
            )
        elif params.forecast_method == "–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ":
            display_tab2_monte_carlo(tab_container, base_financials, params)

    elif chosen == "–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏":
        tab_container = st.container()
        base_financials = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        display_tab3_header(tab_container)
        display_tab3_bep_info(tab_container, base_financials, params)
        display_tab3_monthly_bep(tab_container, base_financials, params)
        display_tab3_sensitivity(tab_container, params, disable_extended=False, help_texts=help_texts)

    elif chosen == "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è":
        tab_container = st.container()
        base_financials = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        irr_val = calculate_irr(
            [
                -params.one_time_setup_cost - params.one_time_equipment_cost
                - params.one_time_other_costs - params.one_time_legal_cost
                - params.one_time_logistics_cost
            ]
            + [base_financials["profit"]] * params.time_horizon
        )
        display_tab4_header(tab_container)
        display_tab4_area_metrics(tab_container, params)
        display_tab4_storage_table(tab_container, params, base_financials)
        display_tab4_profit_table(tab_container, params, base_financials)
        display_tab4_results(tab_container, base_financials, params, irr_val)

    elif chosen == "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        st.header("–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
        import copy

        st.write("–£–∫–∞–∂–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:")

        with st.expander("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", expanded=True):
            opt_storage_fee_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (%)",
                -50, 50, 20, step=5
            )
            opt_loan_rate_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–π–º–æ–≤ (%)",
                -50, 50, -20, step=5
            )
            opt_default_prob_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ default_probability (%)",
                -50, 100, -20, step=10
            )

        with st.expander("–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", expanded=True):
            pes_storage_fee_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (%)",
                -50, 50, -20, step=5,
                key="pes_storage_fee_pct"
            )
            pes_loan_rate_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–π–º–æ–≤ (%)",
                -50, 50, 20, step=5,
                key="pes_loan_rate_pct"
            )
            pes_default_prob_pct = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ default_probability (%)",
                -50, 100, 30, step=10,
                key="pes_default_prob_pct"
            )

        st.write("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

        def apply_changes(base_params, fee_pct, loan_pct, def_pct):
            p = copy.deepcopy(base_params)
            p.storage_fee *= (1 + fee_pct / 100.0)
            p.loan_interest_rate *= (1 + loan_pct / 100.0)
            factor = (1 + def_pct / 100.0)
            factor = max(factor, 0)
            p.default_probability *= factor
            return p

        opt_params = apply_changes(params, opt_storage_fee_pct, opt_loan_rate_pct, opt_default_prob_pct)
        pes_params = apply_changes(params, pes_storage_fee_pct, pes_loan_rate_pct, pes_default_prob_pct)
        real_params = copy.deepcopy(params)

        fin_opt = calculate_financials(opt_params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        fin_pes = calculate_financials(pes_params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        fin_real = calculate_financials(real_params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)

        scenarios_data = [
            {
                "–°—Ü–µ–Ω–∞—Ä–∏–π": "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π",
                "–î–æ—Ö–æ–¥": fin_opt["total_income"],
                "–†–∞—Å—Ö–æ–¥": fin_opt["total_expenses"],
                "–ü—Ä–∏–±—ã–ª—å": fin_opt["profit"]
            },
            {
                "–°—Ü–µ–Ω–∞—Ä–∏–π": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
                "–î–æ—Ö–æ–¥": fin_real["total_income"],
                "–†–∞—Å—Ö–æ–¥": fin_real["total_expenses"],
                "–ü—Ä–∏–±—ã–ª—å": fin_real["profit"]
            },
            {
                "–°—Ü–µ–Ω–∞—Ä–∏–π": "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π",
                "–î–æ—Ö–æ–¥": fin_pes["total_income"],
                "–†–∞—Å—Ö–æ–¥": fin_pes["total_expenses"],
                "–ü—Ä–∏–±—ã–ª—å": fin_pes["profit"]
            }
        ]
        df_scenarios = pd.DataFrame(scenarios_data)
        st.dataframe(
            df_scenarios.style.format(
                {
                    "–î–æ—Ö–æ–¥": "{:,.2f}",
                    "–†–∞—Å—Ö–æ–¥": "{:,.2f}",
                    "–ü—Ä–∏–±—ã–ª—å": "{:,.2f}"
                }
            )
        )

        st.write("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç—Ä—ë—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
        from streamlit_ui import ChartDisplay
        df_plot = df_scenarios.melt(
            id_vars="–°—Ü–µ–Ω–∞—Ä–∏–π",
            value_vars=["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥", "–ü—Ä–∏–±—ã–ª—å"],
            var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å",
            value_name="–ó–Ω–∞—á–µ–Ω–∏–µ"
        )
        chart_scen = ChartDisplay("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –î–æ—Ö–æ–¥, –†–∞—Å—Ö–æ–¥, –ü—Ä–∏–±—ã–ª—å", x_title="–°—Ü–µ–Ω–∞—Ä–∏–π", y_title="–†—É–±–ª–∏")
        chart_scen.display_bar(df_plot, x="–°—Ü–µ–Ω–∞—Ä–∏–π", y="–ó–Ω–∞—á–µ–Ω–∏–µ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")

        st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.")

    elif chosen == "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        st.header("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞")

        base_fin = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)

        st.subheader("–ü–ª–æ—â–∞–¥–∏")
        st.write(f"–ü–æ–ª–µ–∑–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {params.usable_area:.2f} –º¬≤")
        st.write(f"–ü—Ä–æ—Å—Ç–æ–µ: {params.storage_area:.2f} –º¬≤")
        st.write(f"–ó–∞–π–º—ã: {params.loan_area:.2f} –º¬≤")
        st.write(f"VIP: {params.vip_area:.2f} –º¬≤")
        st.write(f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ: {params.short_term_area:.2f} –º¬≤")

        st.subheader("–î–æ—Ö–æ–¥ –ø–æ —Å—Ç–∞—Ç—å—è–º")
        st.write(f"–ü—Ä–æ—Å—Ç–æ–µ: {base_fin['storage_income']:.2f} —Ä—É–±.")
        st.write(f"VIP: {base_fin['vip_income']:.2f} —Ä—É–±.")
        st.write(f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ: {base_fin['short_term_income']:.2f} —Ä—É–±.")
        st.write(f"–ó–∞–π–º—ã: {base_fin['loan_income']:.2f} —Ä—É–±.")
        st.write(f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {base_fin['realization_income']:.2f} —Ä—É–±.")

        st.subheader("–†–∞—Å—Ö–æ–¥—ã –ø–æ —Å—Ç–∞—Ç—å—è–º")
        monthly_rent = params.total_area * params.rental_cost_per_m2
        st.write(f"–ê—Ä–µ–Ω–¥–∞: {monthly_rent:.2f} —Ä—É–±.")
        packaging_cost = params.total_area * params.packaging_cost_per_m2
        st.write(f"–£–ø–∞–∫–æ–≤–∫–∞: {packaging_cost:.2f} —Ä—É–±.")
        electricity_cost = params.total_area * params.electricity_cost_per_m2
        st.write(f"–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: {electricity_cost:.2f} —Ä—É–±.")
        st.write(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {params.salary_expense:.2f} —Ä—É–±.")
        st.write(f"–ü—Ä–æ—á–∏–µ: {params.miscellaneous_expenses:.2f} —Ä—É–±.")
        st.write(f"–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {params.depreciation_expense:.2f} —Ä—É–±.")
        st.write(f"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {params.marketing_expenses:.2f} —Ä—É–±.")
        st.write(f"–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: {params.insurance_expenses:.2f} —Ä—É–±.")
        st.write(f"–ù–∞–ª–æ–≥–∏: {params.taxes:.2f} —Ä—É–±.")
        st.write(f"–ö–æ–º–º—É–Ω–∞–ª–∫–∞: {params.utilities_expenses:.2f} —Ä—É–±.")
        st.write(f"–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {params.maintenance_expenses:.2f} —Ä—É–±.")
        st.write(f"–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {base_fin['total_expenses']:.2f} —Ä—É–±.")

        st.subheader("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
        income_minus_expenses = base_fin["total_income"] - base_fin["total_expenses"]
        st.write(f"–ü—Ä–∏–±—ã–ª—å –¥–æ —É—á—ë—Ç–∞ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö: {income_minus_expenses:.2f} —Ä—É–±.")
        st.write(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á—ë—Ç–æ–º –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤): {base_fin['profit']:.2f} —Ä—É–±.")
        st.info(
            "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏ "
            "–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        )
    
    elif chosen == "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è":
        st.header("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        
        with open("help.md", "r", encoding="utf-8") as f:
            help_text = f.read()

        # –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        search_term = st.text_input("–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "")
        if search_term:
                search_results = [line for line in help_text.splitlines() if search_term.lower() in line.lower()]
                if search_results:
                    for result in search_results:
                        st.markdown(result, unsafe_allow_html=True)
                else:
                    st.info("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
             st.markdown(help_text, unsafe_allow_html=True)
        
        with st.expander("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)"):
             st.markdown("""
                **Q: –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (BEP)?**
                A: –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–≤–Ω–æ–π –æ–±—â–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º.

                **Q: –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NPV?**
                A: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NPV –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥—É—â–∏—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤—ã–≥–æ–¥–µ–Ω.

                **Q: –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏?**
                A: –£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–µ, –∑–∞–π–º—ã, VIP, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ) , –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å–∞–º–æ.

                **Q: –ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ—Ç–æ–¥–µ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ?**
                A: –í—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ –ø—Ä–∏—Ä–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö —Å–ª—É—á–∞–µ–≤, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –±—É–¥—É—Ç –±–ª–∏–∑–∫–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. –¢—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ –ø–æ–¥–æ–π–¥–µ—Ç, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –º–æ–¥–∞–ª—å–Ω–æ–µ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ), –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è.

                **Q: –ß—Ç–æ —Ç–∞–∫–æ–µ RMSE, R¬≤ –∏ MAE –≤ ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏?**
                  A: RMSE - –∫–æ—Ä–µ–Ω—å —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π. R¬≤ - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –º–æ–¥–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ. MAE - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é.

                **Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ ML-–º–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç –ø–ª–æ—Ö–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã?**
                A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.

                **Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–∫–ª–∞–¥–æ–≤?**
                A: –î–∞, –Ω–æ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–º—É —Ç–∏–ø—É —Å–∫–ª–∞–¥–∞, –∞ –Ω–µ –±—Ä–∞—Ç—å –∏—Ö "–∏–∑ –≤–æ–∑–¥—É—Ö–∞".

                 **Q: –ö–∞–∫ –≤–ª–∏—è—é—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–∞—Å–∞ –Ω–∞ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏?**
                A: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç BEP –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤, –¥–µ–ª–∞—è —Ä–∞—Å—á—ë—Ç –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤—ã –º–æ–≥—É—Ç –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–≤–∞—è —Ä–µ–∑–µ—Ä–≤.

                **Q: –ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã?**
                A: –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –≤—Å–µ–º—É –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–≥–Ω–æ–∑–∞, —á—Ç–æ –¥–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, –∏ —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç –∫–æ–ª–µ–±–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏.

                **Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è?**
                  A: –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ú–æ–¥–µ–ª–∏ ML –ø—ã—Ç–∞—é—Ç—Å—è —É–ª–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.

                **Q: –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?**
                  A: –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã") –∏ –∑–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å –∏—Ö —Å –¥—Ä—É–≥–∏–º–∏, —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏, —á—Ç–æ –±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏, –∏ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

                **Q: –ß—Ç–æ —Ç–∞–∫–æ–µ "–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫" –≤ ML –º–æ–¥–µ–ª—è—Ö?**
                A: –≠—Ç–æ –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) –¥–ª—è ML-–º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é GridSearchCV –∏–ª–∏ RandomizedSearchCV. –≠—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. GridSearchCV ‚Äî —ç—Ç–æ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä, RandomizedSearchCV ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è.

                 **Q: –ß—Ç–æ —Ç–∞–∫–æ–µ "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤" –≤ ML –º–æ–¥–µ–ª—è—Ö?**
                A: –≠—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –º–µ–Ω–µ–µ –∑–Ω–∞—á–∏–º—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü—Ä–∏–∑–Ω–∞–∫–∏ (—Ñ–∏—á–∏) –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏.

                 **Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ NPV?**
                 A: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ NPV –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏. –ë—É–¥—É—â–∏–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä—É—é—Ç—Å—è (—Ç.–µ. –∏—Ö —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è) –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–≤–∫–µ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

                 **Q: –ö–∞–∫ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?**
                  A: –¢–∞–±–ª–∏—Ü–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å. –ü–æ —Ç–∞–±–ª–∏—Ü–µ –≤–∏–¥–Ω–æ, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

                 **Q: –ß—Ç–æ —Ç–∞–∫–æ–µ "–≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"?**
                 A: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äì —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–µ—Å—è—Ü–∞—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑. –ß–µ–º –±–æ–ª—å—à–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ.

                 **Q: –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?**
                A: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü, –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ä–∞–±–æ—Ç—ã —Å–∫–ª–∞–¥–∞, —Ç–∞—Ä–∏—Ñ–∞—Ö –∏–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ.

                 **Q: –ó–∞—á–µ–º –Ω—É–∂–Ω–æ "–∑–µ—Ä–Ω–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏" –≤ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ?**
                 A: –ó–Ω–∞—á–µ–Ω–∏–µ "seed" –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
                
                **Q: –ü–æ—á–µ–º—É –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö –≤–∏–¥–Ω—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã?**
                 A: –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–¥–∏–∞–ø–∞–∑–æ–Ω—ã) –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö ML-–ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ –ø—Ä–æ–≥–Ω–æ–∑ —Ç–æ—á–Ω—ã–π, –∞ –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å.

             """)
    elif chosen == "–î–∞—à–±–æ—Ä–¥":
        tab_container = st.container()
        base_financials = calculate_financials(params, disable_extended=False, amortize_one_time_expenses=amortize_one_time_expenses)
        display_tab5_header(tab_container)
        display_tab5_dashboard(tab_container, base_financials, params,  help_texts=help_texts)